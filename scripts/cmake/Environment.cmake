# Detect information about the build environment

# Detect Platform
if(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
  set(PHI_PLATFORM_WINDOWS 1)
  phi_trace("Platform: Windows")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
  set(PHI_PLATFORM_UNIX 1)
  phi_trace("Platform: Unix")

  if(ANDROID)
    set(PHI_PLATFORM_ANDROID 1)
    phi_trace("Platform: Android")
  else()
    set(PHI_PLATFORM_LINUX 1)
    phi_trace("Platform: Linux")
  endif()
elseif(CMAKE_SYSTEM_NAME MATCHES "^k?FreeBSD$")
  set(PHI_PLATFORM_FREEBSD 1)
  phi_trace("Platform: FreeBSD")
elseif(CMAKE_SYSTEM_NAME MATCHES "^OpenBSD$")
  set(PHI_PLATFORM_OPENBSD 1)
  phi_trace("Platform: OpenBSD")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
  if(IOS)
    set(PHI_PLATFORM_IOS 1)
    phi_trace("Platform: IOS")
  else()
    set(PHI_PLATFORM_MACOSX 1)
    phi_trace("Platform: MacOS")
  endif()
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Android")
  set(PHI_PLATFORM_ANDROID 1)
  phi_trace("Platform: Android")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Emscripten")
  set(PHI_PLATFORM_EMSCRIPTEN 1)
  phi_trace("Platform: Emscripten")
else()
  phi_warn("Unsupported operating system or environment: ${CMAKE_SYSTEM_NAME}")
endif()

# Detect the architecture (note: this test won't work for cross-compilation)
include(CheckTypeSize)
check_type_size(void* SIZEOF_VOID_PTR BUILTIN_TYPES_ONLY LANGUAGE CXX)
if(${SIZEOF_VOID_PTR} STREQUAL "4")
  set(PHI_ARCH_32BITS 1)
  phi_trace("Arch: 32bits")
elseif(${SIZEOF_VOID_PTR} STREQUAL "8")
  set(PHI_ARCH_64BITS 1)
  phi_trace("Arch: 64bits")
else()
  phi_warn("Unsupported architecture of size ${SIZEOF_VOID_PTR}")
endif()

# Detect compiler
if(CMAKE_CXX_COMPILER MATCHES "clang[+][+]" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  # CMAKE_CXX_COMPILER_ID is an internal CMake variable subject to change, but there is no other way
  # to detect CLang at the moment
  set(PHI_COMPILER_CLANG 1)
  execute_process(COMMAND "${CMAKE_CXX_COMPILER}" "--version" OUTPUT_VARIABLE CLANG_VERSION_OUTPUT)
  string(REGEX REPLACE ".*clang version ([0-9]+\\.[0-9]+).*" "\\1" PHI_CLANG_VERSION
                       "${CLANG_VERSION_OUTPUT}")

  phi_trace("Compiler: Clang-${PHI_CLANG_VERSION}")

  # Test for AppleClang
  if(CMAKE_CXX_COMPILER_ID MATCHES "AppleClang")
    set(PHI_COMPILER_APPLECLANG 1)
    phi_trace("Compiler: AppleClang")
  endif()
elseif(CMAKE_COMPILER_IS_GNUCXX)
  set(PHI_COMPILER_GCC 1)

  execute_process(COMMAND "${CMAKE_CXX_COMPILER}" "-dumpversion" OUTPUT_VARIABLE GCC_VERSION_OUTPUT)
  string(REGEX REPLACE "([0-9]+\\.[0-9]+).*" "\\1" PHI_GCC_VERSION "${GCC_VERSION_OUTPUT}")
  execute_process(COMMAND "${CMAKE_CXX_COMPILER}" "--version" OUTPUT_VARIABLE GCC_COMPILER_VERSION)
  string(REGEX MATCHALL ".*(tdm[64]*-[1-9]).*" PHI_COMPILER_GCC_TDM "${GCC_COMPILER_VERSION}")
  execute_process(COMMAND "${CMAKE_CXX_COMPILER}" "-dumpmachine" OUTPUT_VARIABLE GCC_MACHINE)
  string(STRIP "${GCC_MACHINE}" GCC_MACHINE)

  phi_trace("Compiler: gcc")

  if(GCC_MACHINE MATCHES ".*w64.*")
    set(PHI_COMPILER_GCC_W64 1)
  endif()
elseif(MSVC)
  set(PHI_COMPILER_MSVC 1)

  if(MSVC_VERSION EQUAL 1400)
    set(PHI_MSVC_VERSION 8)
  elseif(MSVC_VERSION EQUAL 1500)
    set(PHI_MSVC_VERSION 9)
  elseif(MSVC_VERSION EQUAL 1600)
    set(PHI_MSVC_VERSION 10)
  elseif(MSVC_VERSION EQUAL 1700)
    set(PHI_MSVC_VERSION 11)
  elseif(MSVC_VERSION EQUAL 1800)
    set(PHI_MSVC_VERSION 12)
  elseif(MSVC_VERSION EQUAL 1900)
    set(PHI_MSVC_VERSION 14)
  elseif(MSVC_VERSION EQUAL 1910)
    set(PHI_MSVC_VERSION 14.1)
  elseif(MSVC_VERSION EQUAL 1911)
    set(PHI_MSVC_VERSION 14.11)
  elseif(MSVC_VERSION EQUAL 1912)
    set(PHI_MSVC_VERSION 14.12)
  elseif(MSVC_VERSION EQUAL 1913)
    set(PHI_MSVC_VERSION 14.13)
  elseif(MSVC_VERSION EQUAL 1914)
    set(PHI_MSVC_VERSION 14.14)
  elseif(MSVC_VERSION EQUAL 1915)
    set(PHI_MSVC_VERSION 14.15)
  elseif(MSVC_VERSION EQUAL 1916)
    set(PHI_MSVC_VERSION 14.16)
  elseif(MSVC_VERSION EQUAL 1920)
    set(PHI_MSVC_VERSION 14.2)
  elseif(MSVC_VERSION EQUAL 1921)
    set(PHI_MSVC_VERSION 14.21)
  elseif(MSVC_VERSION EQUAL 1922)
    set(PHI_MSVC_VERSION 14.22)
  elseif(MSVC_VERSION EQUAL 1923)
    set(PHI_MSVC_VERSION 14.23)
  elseif(MSVC_VERSION EQUAL 1924)
    set(PHI_MSVC_VERSION 14.24)
  elseif(MSVC_VERSION EQUAL 1925)
    set(PHI_MSVC_VERSION 14.25)
  elseif(MSVC_VERSION EQUAL 1926)
    set(PHI_MSVC_VERSION 14.26)
  elseif(MSVC_VERSION EQUAL 1927)
    set(PHI_MSVC_VERSION 14.27)
  elseif(MSVC_VERSION EQUAL 1928)
    set(PHI_MSVC_VERSION 14.28)
  else()
    phi_warn("Unknown version of MSVC used. MSVC_VERSION=${MSVC_VERSION}")
  endif()

  if(PHI_MSVC_VERSION)
    phi_log("Compiler: MSVC ${PHI_MSVC_VERSION}")
  endif()
else()
  phi_warn("Unsupported compiler ${CMAKE_CXX_COMPILER_ID}")
endif()

# Check if CI Build
if(DEFINED ENV{CI})
  set(PHI_CI_BUILD TRUE)
else()
  set(PHI_CI_BUILD FALSE)
endif()

include(ProcessorCount)
ProcessorCount(ProcCount)
if(NOT ProcCount EQUAL 0)
  set(PHI_PROCESSOR_COUNT ${ProcCount})
else()
  phi_warn("Failed to get processor count")

  # We always assume to have atleast one processor
  set(PHI_PROCESSOR_COUNT 1)
endif()

phi_trace("Processor Count: ${PHI_PROCESSOR_COUNT}")
