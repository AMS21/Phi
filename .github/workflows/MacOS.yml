name: MacOS

on: [push, pull_request]

jobs:
  Build:
    runs-on: ${{ matrix.cfg.os }}

    env:
      CMAKE_BUILD_PARALLEL_LEVEL: "2"
      CTEST_PARALLEL_LEVEL: "2"
      CTEST_OUTPUT_ON_FAILURE: "ON"
      # Sanitizers
      ASAN_OPTIONS: "quarantine_size_mb=1024:redzone=256:strict_string_checks=1:detect_odr_violation=2:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=3:print_stats=1:use_odr_indicator=1:strict_memcmp=1:print_scariness=1:handle_abort=1:symbolize=1:handle_segv=1:handle_sigill=1:allocator_release_to_os_interval_ms=500:handle_sigfpe=1:handle_sigbus=1:alloc_dealloc_mismatch=1:check_malloc_usable_size=1"
      LSAN_OPTIONS: "report_objects=1:use_unaligned=1"
      TSAN_OPTIONS: "halt_on_error=1:history_size=3:force_seq_cst_atomics=1"
      UBSAN_OPTIONS: "print_stacktrace=1:report_error_type=1"

    strategy:
      fail-fast: true
      matrix:
        cfg:
          # AppleClang 12.5.1
          - { os: macos-11, compiler: clang++, compiler_version: "12.5.1" }
          - { os: macos-11, compiler: clang++, compiler_version: "12.5.1", dynamic_test: "asan" }
          #- { os: macos-11, compiler: clang++, compiler_version: "12.5.1", dynamic_test: "msan" }
          #- { os: macos-11, compiler: clang++, compiler_version: "12.5.1", dynamic_test: "tsan" }
          - { os: macos-11, compiler: clang++, compiler_version: "12.5.1", dynamic_test: "ubsan" }
          - { os: macos-11, compiler: clang++, compiler_version: "12.5.1", dynamic_test: "valgrind" }
          # AppleClang 13.0
          - { os: macos-11, compiler: clang++, compiler_version: "13.0" }
          - { os: macos-11, compiler: clang++, compiler_version: "13.0", dynamic_test: "asan" }
          #- { os: macos-11, compiler: clang++, compiler_version: "13.0", dynamic_test: "msan" }
          #- { os: macos-11, compiler: clang++, compiler_version: "13.0", dynamic_test: "tsan" }
          - { os: macos-11, compiler: clang++, compiler_version: "13.0", dynamic_test: "ubsan" }
          - { os: macos-11, compiler: clang++, compiler_version: "13.0", dynamic_test: "valgrind" }
          # AppleClang 13.1
          - { os: macos-11, compiler: clang++, compiler_version: "13.1" }
          - { os: macos-11, compiler: clang++, compiler_version: "13.1", dynamic_test: "asan" }
          #- { os: macos-11, compiler: clang++, compiler_version: "13.1", dynamic_test: "msan" }
          #- { os: macos-11, compiler: clang++, compiler_version: "13.1", dynamic_test: "tsan" }
          - { os: macos-11, compiler: clang++, compiler_version: "13.1", dynamic_test: "ubsan" }
          - { os: macos-11, compiler: clang++, compiler_version: "13.1", dynamic_test: "valgrind" }
          # AppleClang 13.2
          - { os: macos-11, compiler: clang++, compiler_version: "13.2" }
          - { os: macos-11, compiler: clang++, compiler_version: "13.2", dynamic_test: "asan" }
          #- { os: macos-11, compiler: clang++, compiler_version: "13.2", dynamic_test: "msan" }
          #- { os: macos-11, compiler: clang++, compiler_version: "13.2", dynamic_test: "tsan" }
          - { os: macos-11, compiler: clang++, compiler_version: "13.2", dynamic_test: "ubsan" }
          - { os: macos-11, compiler: clang++, compiler_version: "13.2", dynamic_test: "valgrind" }

    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          submodules: recursive

      - name: Install cmake
        uses: lukka/get-cmake@v3.22.2

      - name: Setup XCode
        if: matrix.cfg.compiler == 'clang++'
        uses: maxim-lobanov/setup-xcode@v1.4.1
        with:
          xcode-version: ${{ matrix.cfg.compiler_version }}

      - name: Install
        run: |
          if [ "${{ matrix.cfg.compiler }}" = "g++" ]; then
            brew install gcc@${{ matrix.cfg.compiler_version }}
            echo "CXX=g++-${{ matrix.cfg.compiler_version }}" >> $GITHUB_ENV
          elif [ "${{ matrix.cfg.compiler}}" = "clang++" ]; then
            echo "CXX=clang++" >> $GITHUB_ENV
          fi

          # Install valgrind
          if [ "${{ matrix.cfg.dynamic_test }}" = "valgrind" ]; then
            brew tap LouisBrunner/valgrind
            brew install --HEAD LouisBrunner/valgrind/valgrind
          fi

      - name: Configure build directory
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_VERBOSE_MAKEFILE=ON ..

      - name: Configure dynamic analysis
        run: |
          cd build

          # Address Sanitizer
          if [ "${{ matrix.cfg.dynamic_test }}" = "asan" ]; then
            cmake .. -DENABLE_SANITIZER_ADDRESS=ON            -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -fno-common -g"

          # Leak Sanitizer
          elif [ "${{ matrix.cfg.dynamic_test }}" = "lsan" ]; then
            cmake .. -DENABLE_SANITIZER_LEAK=ON               -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -g"

          # Memory Sanitizer
          elif [ "${{ matrix.cfg.dynamic_test }}" = "msan" ]; then
            cmake .. -DENABLE_SANITIZER_MEMORY=ON             -DCMAKE_CXX_FLAGS="-fsanitize-memory-track-origins=2 -fsanitize-memory-use-after-dtor -fno-omit-frame-pointer -g"

          # Thread Sanitizer
          elif [ "${{ matrix.cfg.dynamic_test }}" = "tsan" ]; then
            cmake .. -DENABLE_SANITIZER_THREAD=ON             -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -g"

          # Undefined Behavior Sanitizer
          elif [ "${{ matrix.cfg.dynamic_test }}" = "ubsan" ]; then
            cmake .. -DENABLE_SANITIZER_UNDEFINED_BEHAVIOR=ON -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -g"

          # Valgrind
          elif [ "${{ matrix.cfg.dynamic_test }}" = "valgrind" ]; then
            # Disable failure tests for valgrind
            cmake .. -DPHI_ENABLE_FAILURE_TESTS=Off -DPHI_TEST_WITH_VALGRIND=ON

          # No additional dynamic analysis
          else
            echo Running without extra dynamic analysis
          fi

      - name: Build Debug
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          cmake --build . --clean-first
          ctest . -C Debug

      - name: Build RelWithDebInfo
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
          cmake --build . --clean-first
          ctest . -C RelWithDebInfo

      - name: Build Release
        if: matrix.cfg.dynamic_test == ''
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DPHI_PEDANTIC_WARNINGS=OFF
          cmake --build . --clean-first
          ctest . -C Release
