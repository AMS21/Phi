name: MacOS

on: [push, pull_request]

jobs:
  Build:
    runs-on: macos-latest

    env:
      CTEST_OUTPUT_ON_FAILURE: ON
      CTEST_PARALLEL_LEVEL: 2

    strategy:
      fail-fast: false
      matrix:
        cfg:
          - { compiler: g++, compiler_version: "10" }
          - { compiler: clang++, compiler_version: "11.6" }

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      - name: Install cmake
        uses: lukka/get-cmake@latest

      - name: Install
        run: |
          if [ "${{ matrix.cfg.compiler }}" = "g++" ]; then
            brew install gcc@${{ matrix.cfg.compiler_version }}
            echo "::set-env name=CXX::g++-${{ matrix.cfg.compiler_version }}"
          else
            ls -ls /Applications/
            sudo xcode-select -switch /Applications/Xcode_${{ matrix.cfg.compiler_version }}.app
            echo "::set-env name=CXX::clang++"
          fi

      - name: Configure build directory
        run: |
          mkdir build
          cd build
          cmake ..

      - name: Build Debug
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          cmake --build . --clean-first
          ctest .

      - name: Build RelWithDebInfo
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
          cmake --build . --clean-first
          ctest .

      - name: Build Release
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --clean-first
          ctest .

      - name: Build & Test with Address Sanitizer
        env:
          ASAN_OPTIONS: "strict_string_checks=true:detect_odr_violation=2:detect_stack_use_after_return=true:check_initialization_order=true:strict_init_order=true:detect_invalid_pointer_pairs=3"
        run: |
          # Create directory
          mkdir build-asan
          cd build-asan

          # Configure
          cmake .. -DENABLE_SANITIZER_ADDRESS=ON -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -fno-common -g"

          # Debug
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          cmake --build . --clean-first
          ctest .

          # RelWithDebInfo
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
          cmake --build . --clean-first
          ctest .

          # Release
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --clean-first
          ctest .

      - name: Build & Test with Leak Sanitizer
        run: |
          # Create directory
          mkdir build-lsan
          cd build-lsan

          # Configure
          cmake .. -DENABLE_SANITIZER_LEAK=ON -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -g"

          # Debug
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          cmake --build . --clean-first
          ctest .

          # RelWithDebInfo
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
          cmake --build . --clean-first
          ctest .

          # Release
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --clean-first
          ctest .

      - name: Build & Test with Memory Sanitizer
        continue-on-error: true
        if: matrix.cfg.compiler == 'clang++'
        run: |
          # Create directory
          mkdir build-msan
          cd build-msan

          # Configure
          cmake .. -DENABLE_SANITIZER_MEMORY=ON -DCMAKE_CXX_FLAGS="-fsanitize-memory-track-origins=2 -fsanitize-memory-use-after-dtor -fno-omit-frame-pointer -g"

          # Debug
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          cmake --build . --clean-first
          ctest .

          # RelWithDebInfo
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
          cmake --build . --clean-first
          ctest .

          # Release
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --clean-first
          ctest .

      - name: Build & Test with Thread Sanitizer
        if: matrix.cfg.compiler == 'clang++'
        env:
          TSAN_OPTIONS: "force_seq_cst_atomics=1"
        run: |
          # Create directory
          mkdir build-tsan
          cd build-tsan

          # Configure
          cmake .. -DENABLE_SANITIZER_THREAD=ON -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -g"

          # Debug
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          cmake --build . --clean-first
          ctest .

          # RelWithDebInfo
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
          cmake --build . --clean-first
          ctest .

          # Release
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --clean-first
          ctest .

      - name: Build & Test with Undefined Behavior Sanitizer
        env:
          UBSAN_OPTIONS: "print_stacktrace=1"
        run: |
          # Create directory
          mkdir build-ubsan
          cd build-ubsan

          # Configure
          cmake .. -DENABLE_SANITIZER_UNDEFINED_BEHAVIOR=ON -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -g"

          # Debug
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          cmake --build . --clean-first
          ctest .

          # RelWithDebInfo
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
          cmake --build . --clean-first
          ctest .

          # Release
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --clean-first
          ctest .

      - name: Generate warnings
        run: |
          # Build
          mkdir build-warnings
          cd build-warnings
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          cmake --build .  --clean-first 2> build.log

          # Filter out warnings for external dependencies
          cat build.log | grep -Ev "Phi/external" > build_filtered.log || true

      - name: ReviewDog check
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat build-warnings/build_filtered.log | reviewdog -efm="%f:%l:%c: warning: %m" -diff="git diff" -reporter=github-check -name "MacOS ${{ matrix.cfg.compiler }}-${{ matrix.cfg.compiler_version }} warnings" -level warning

      - name: ReviewDog Review
        if: ${{ github.event_name == 'pull_request' }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat build-warnings/build_filtered.log | reviewdog -efm="%f:%l:%c: warning: %m" -diff="git diff" -reporter=github-pr-review -name "MacOS ${{ matrix.cfg.compiler }}-${{ matrix.cfg.compiler_version }} warnings" -level warning
