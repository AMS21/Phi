name: MacOS

on:
  push:
    paths:
      # Workflow file itself
      - '.github/workflows/MacOS.yml'
      # C++ files
      - '**.cpp'
      - '**.hpp'
      # CMake files
      - '**.cmake'
      - '**.txt'
      # Script files
      - '**.sh'
    tags:
    branches-ignore:
      - 'dependabot/**'
  pull_request:
    branches:
      - main
      - develop
  release:
    types: [published]
  workflow_dispatch:

jobs:
  xcode:
    runs-on: ${{ matrix.cfg.os }}

    env:
      # Sanitizers
      ASAN_OPTIONS: "quarantine_size_mb=1024:redzone=256:strict_string_checks=1:detect_odr_violation=2:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=3:print_stats=1:use_odr_indicator=1:strict_memcmp=1:print_scariness=1:handle_abort=1:symbolize=1:handle_segv=1:handle_sigill=1:allocator_release_to_os_interval_ms=500:handle_sigfpe=1:handle_sigbus=1:alloc_dealloc_mismatch=1:check_malloc_usable_size=1"
      LSAN_OPTIONS: "report_objects=1:use_unaligned=1"
      TSAN_OPTIONS: "halt_on_error=1:history_size=3:force_seq_cst_atomics=1"
      UBSAN_OPTIONS: "print_stacktrace=1:report_error_type=1"

    strategy:
      fail-fast: false

      matrix:
        # Pair of os version and XCode version
        cfg:
          - { os: macos-11, compiler_version: "11.7"   }
          - { os: macos-11, compiler_version: "12.4"   }
          - { os: macos-11, compiler_version: "12.5.1" }
          - { os: macos-11, compiler_version: "13.0"   }
          - { os: macos-11, compiler_version: "13.1"   }
          - { os: macos-11, compiler_version: "13.2"   }
          - { os: macos-12, compiler_version: "13.3.1" }
          - { os: macos-12, compiler_version: "13.4.1" }

        build_type:
          - "Debug"
          - "RelWithDebInfo"
          - "Release"

        dynamic_test:
          - "none"
          - "coverage"
          - "asan"
          - "ubsan"
          - "valgrind"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-xcode-${{ matrix.cfg.compiler_version }}

      - name: Setup Environment
        run: |
          scripts/ci/SetupEnvironment.sh

          # Export dynamic test mode
          echo "PHI_DYNAMIC_TEST=${{ matrix.dynamic_test }}" >> $GITHUB_ENV

      - name: Setup XCode
        uses: maxim-lobanov/setup-xcode@v1.4.1
        with:
          xcode-version: ${{ matrix.cfg.compiler_version }}

      - name: Install ninja
        run: brew install ninja

      - name: Install gcovr
        if: ${{ matrix.dynamic_test == 'coverage' }}
        run: scripts/ci/InstallTools.sh gcovr

      - name: Install valgrind
        if: ${{ matrix.dynamic_test == 'valgrind' }}
        run: |
            brew tap LouisBrunner/valgrind
            brew install --HEAD LouisBrunner/valgrind/valgrind

      - name: Configure build directory
        run: |
          mkdir build -p
          cd build

          cmake -DCMAKE_BUILD_TYPE:STRING=${{ matrix.build_type }} ..

      - name: Build
        working-directory: ./build
        run: cmake --build . --config ${{ matrix.build_type }}

      - name: Run tests
        working-directory: ./build
        run: ctest . -C ${{ matrix.build_type }}

      - name: Process coverage data
        working-directory: ./build
        if: ${{ matrix.dynamic_test == 'coverage' }}
        run: gcovr -j $PROC_COUNT --delete --root ../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable 'xcrun llvm-cov gcov'

      - name: Upload coverage data
        if: ${{ matrix.dynamic_test == 'coverage' }}
        uses: codecov/codecov-action@v3.1.0
        with:
          file: ./build/coverage.xml
          flags: ${{ runner.os }},xcode-${{ matrix.cfg.compiler_version }},${{ matrix.build_type }}
          name: ${{ runner.os }}-xcode-${{ matrix.cfg.compiler_version }}-${{ matrix.build_type }}

  gcc:
    runs-on: macos-10.15

    env:
      # Sanitizers
      ASAN_OPTIONS: "quarantine_size_mb=1024:redzone=256:strict_string_checks=1:detect_odr_violation=2:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=3:print_stats=1:use_odr_indicator=1:strict_memcmp=1:print_scariness=1:handle_abort=1:symbolize=1:handle_segv=1:handle_sigill=1:allocator_release_to_os_interval_ms=500:handle_sigfpe=1:handle_sigbus=1:alloc_dealloc_mismatch=1:check_malloc_usable_size=1"
      LSAN_OPTIONS: "report_objects=1:use_unaligned=1"
      TSAN_OPTIONS: "halt_on_error=1:history_size=3:force_seq_cst_atomics=1"
      UBSAN_OPTIONS: "print_stacktrace=1:report_error_type=1"

    strategy:
      fail-fast: false

      matrix:
        compiler_version:
          - "8"
          #- "9"
          #- "10"
          #- "11"
          - "12"

        build_type:
          - "Debug"
          #- "RelWithDebInfo"
          - "Release"

        dynamic_test:
          - "none"
          - "coverage"
          #- "asan"
          #- "lsan"
          #- "ubsan"
          #- "valgrind"

        exclude:
          # These version seem to not be able to build valgrind for some reason
          - compiler_version: "13"
            dynamic_test: "valgrind"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-gcc-${{ matrix.compiler_version }}

      - name: Setup Environment
        run: |
          scripts/ci/SetupEnvironment.sh

          # Export dynamic test mode
          echo "PHI_DYNAMIC_TEST=${{ matrix.dynamic_test }}" >> $GITHUB_ENV

      - name: Install gcc
        run: |
          brew install gcc@${{ matrix.compiler_version }} ninja
          echo "CXX=g++-${{ matrix.compiler_version }}" >> $GITHUB_ENV

      - name: Install gcovr
        if: ${{ matrix.dynamic_test == 'coverage' }}
        run: scripts/ci/InstallTools.sh gcovr

      - name: Install valgrind
        if: ${{ matrix.dynamic_test == 'valgrind' }}
        run: |
            brew tap LouisBrunner/valgrind
            brew install --HEAD LouisBrunner/valgrind/valgrind

      - name: Configure build directory
        run: |
          mkdir build -p
          cd build

          cmake -DCMAKE_BUILD_TYPE:STRING=${{ matrix.build_type }} ..

      - name: Build
        working-directory: ./build
        run: cmake --build . --config ${{ matrix.build_type }}

      - name: Run tests
        working-directory: ./build
        run: ctest . -C ${{ matrix.build_type }}

      - name: Process coverage data
        working-directory: ./build
        if: ${{ matrix.dynamic_test == 'coverage' }}
        run: gcovr -j $PROC_COUNT --delete --root ../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable 'gcov-${{ matrix.compiler_version }}'

      - name: Upload coverage data
        if: ${{ matrix.dynamic_test == 'coverage' }}
        uses: codecov/codecov-action@v3.1.0
        with:
          file: ./build/coverage.xml
          flags: ${{ runner.os }},gcc-${{ matrix.compiler_version }},${{ matrix.build_type }}
          name: ${{ runner.os }}-gcc-${{ matrix.compiler_version }}-${{ matrix.build_type }}
