name: Linux

on: [push, pull_request]

jobs:
  Build:
    runs-on: ubuntu-latest

    env:
      CTEST_OUTPUT_ON_FAILURE: ON
      CTEST_PARALLEL_LEVEL: 2
      # Sanitizers
      ASAN_OPTIONS: "strict_string_checks=true:detect_odr_violation=2:detect_stack_use_after_return=true:check_initialization_order=true:strict_init_order=true:detect_invalid_pointer_pairs=3"
      TSAN_OPTIONS: "force_seq_cst_atomics=1"
      UBSAN_OPTIONS: "print_stacktrace=1"

    strategy:
      fail-fast: false
      matrix:
        cfg:
          - { compiler: g++, compiler_version: "10" }
          - { compiler: g++, compiler_version: "10", dynamic_test: "asan" }
          - { compiler: g++, compiler_version: "10", dynamic_test: "lsan" }
          - { compiler: g++, compiler_version: "10", dynamic_test: "tsan" }
          - { compiler: g++, compiler_version: "10", dynamic_test: "ubsan" }
          - { compiler: g++, compiler_version: "10", dynamic_test: "valgrind"}
          - { compiler: clang++, compiler_version: "11" }
          - { compiler: clang++, compiler_version: "11", dynamic_test: "asan" }
          - { compiler: clang++, compiler_version: "11", dynamic_test: "lsan" }
          #- { compiler: clang++, compiler_version: "11", dynamic_test: "msan" }
          - { compiler: clang++, compiler_version: "11", dynamic_test: "tsan" }
          - { compiler: clang++, compiler_version: "11", dynamic_test: "ubsan" }
          - { compiler: clang++, compiler_version: "11", dynamic_test: "valgrind"}

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3
        with:
          submodules: recursive

      - name: Install cmake
        uses: lukka/get-cmake@latest

      - name: Install
        run: |
          # Adding repositories
          # Add clang repo
          if [ "${{ matrix.cfg.compiler }}" = "clang++" ]; then
            wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
            sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-${{ matrix.cfg.compiler_version }} main"
          fi

          # Update repo list
          sudo apt-get update -m

          # Install clang++
          if [ "${{ matrix.cfg.compiler }}" = "clang++" ]; then
            sudo apt-get install "clang-${{ matrix.cfg.compiler_version }}" g++-multilib -y
          fi

          # Install g++
          if [ "${{ matrix.cfg.compiler }}" = "g++" ]; then
            sudo apt-get install "g++-${{ matrix.cfg.compiler_version }}" "g++-${{ matrix.cfg.compiler_version }}-multilib" -y
          fi

          # Install valgrind
          if [ "${{ matrix.cfg.dynamic_test }}" = "valgrind" ]; then
            sudo apt-get install valgrind
          fi

          # export compiler
          echo "CXX=${{ matrix.cfg.compiler }}-${{ matrix.cfg.compiler_version }}" >> $GITHUB_ENV

      - name: Configure build directory
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_VERBOSE_MAKEFILE=ON ..

      - name: Configure dynamic analysis
        run: |
          cd build

          # Address Sanitizer
          if [ "${{ matrix.cfg.dynamic_test }}" = "asan" ]; then
            cmake .. -DENABLE_SANITIZER_ADDRESS=ON            -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -fno-common -g"

          # Leak Sanitizer
          elif [ "${{ matrix.cfg.dynamic_test }}" = "lsan" ]; then
            cmake .. -DENABLE_SANITIZER_LEAK=ON               -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -g"

          # Memory Sanitizer
          elif [ "${{ matrix.cfg.dynamic_test }}" = "msan" ]; then
            cmake .. -DENABLE_SANITIZER_MEMORY=ON             -DCMAKE_CXX_FLAGS="-fsanitize-memory-track-origins=2 -fsanitize-memory-use-after-dtor -fno-omit-frame-pointer -g"

          # Thread Sanitizer
          elif [ "${{ matrix.cfg.dynamic_test }}" = "tsan" ]; then
            cmake .. -DENABLE_SANITIZER_THREAD=ON             -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -g"

          # Undefined Behavior Sanitizer
          elif [ "${{ matrix.cfg.dynamic_test }}" = "ubsan" ]; then
            cmake .. -DENABLE_SANITIZER_UNDEFINED_BEHAVIOR=ON -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -g"

          # Valgrind
          elif [ "${{ matrix.cfg.dynamic_test ]]" = "valgrind" ]; then
            # Disable failure tests for valgrind
            cmake .. -DPHI_ENABLE_FAILURE_TESTS=Off -DPHI_TEST_WITH_VALGRIND=ON

          # No additional dynamic analysis
          else
            echo Running without extra dynamic analysis
          fi

      - name: Build Debug
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          cmake --build . --clean-first
          ctest .

      - name: Build RelWithDebInfo
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
          cmake --build . --clean-first
          ctest .

      - name: Build Release
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --clean-first
          ctest .

  Warnings:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        cfg:
          - { compiler: g++, compiler_version: "10" }
          - { compiler: clang++, compiler_version: "11" }

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3
        with:
          submodules: recursive

      - uses: reviewdog/action-setup@v1.0.2
        with:
          reviewdog_version: latest

      - name: Install cmake
        uses: lukka/get-cmake@latest

      - name: Install
        run: |
          # Adding repositories
          # Add clang repo
          if [ "${{ matrix.cfg.compiler }}" = "clang++" ]; then
            wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
            sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-${{ matrix.cfg.compiler_version }} main"
          fi

          # Update repo list
          sudo apt-get update -m

          # Install clang++
          if [ "${{ matrix.cfg.compiler }}" = "clang++" ]; then
            sudo apt-get install "clang-${{ matrix.cfg.compiler_version }}" g++-multilib -y
          fi

          # Install g++
          if [ "${{ matrix.cfg.compiler }}" = "g++" ]; then
            sudo apt-get install "g++-${{ matrix.cfg.compiler_version }}" "g++-${{ matrix.cfg.compiler_version }}-multilib" -y
          fi

          # export compiler
          echo "CXX=${{ matrix.cfg.compiler }}-${{ matrix.cfg.compiler_version }}" >> $GITHUB_ENV

      - name: Generate warnings
        run: |
          # Build
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          cmake --build . --clean-first 2> build.log

          # Filter out warnings for external dependencies
          cat build.log | grep -Ev "Phi/external" > build_filtered.log || true

      - name: ReviewDog check
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat build/build_filtered.log | reviewdog -efm="%f:%l:%c: warning: %m" -diff="git diff" -reporter=github-check -name "Linux ${{ matrix.cfg.compiler }}-${{ matrix.cfg.compiler_version }} warnings" -level warning
