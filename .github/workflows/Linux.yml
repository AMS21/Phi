name: Linux

on:
  push:
    branches-ignore:
      - 'dependabot/**'
  pull_request:

jobs:
  Build:
    runs-on: ${{ matrix.cfg.os }}

    env:
      CMAKE_BUILD_PARALLEL_LEVEL: "2"
      CTEST_PARALLEL_LEVEL: "2"
      CTEST_OUTPUT_ON_FAILURE: "ON"
      # Sanitizers
      ASAN_OPTIONS: "quarantine_size_mb=1024:redzone=256:strict_string_checks=1:detect_odr_violation=2:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=3:detect_leaks=1:print_stats=1:use_odr_indicator=1:strict_memcmp=1:print_scariness=1:handle_abort=1:symbolize=1:handle_segv=1:handle_sigill=1:allocator_release_to_os_interval_ms=500:handle_sigfpe=1:handle_sigbus=1:alloc_dealloc_mismatch=1:check_malloc_usable_size=1"
      LSAN_OPTIONS: "report_objects=1:use_unaligned=1"
      TSAN_OPTIONS: "halt_on_error=1:history_size=3:force_seq_cst_atomics=1"
      UBSAN_OPTIONS: "print_stacktrace=1:report_error_type=1"

    strategy:
      fail-fast: false
      matrix:
        cfg:
          # gcc-8
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "8" }
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "8", dynamic_test: "asan" }
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "8", dynamic_test: "lsan" }
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "8", dynamic_test: "tsan" }
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "8", dynamic_test: "ubsan" }
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "8", dynamic_test: "valgrind" }
          # gcc-9
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "9" }
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "9", dynamic_test: "asan" }
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "9", dynamic_test: "lsan" }
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "9", dynamic_test: "tsan" }
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "9", dynamic_test: "ubsan" }
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "9", dynamic_test: "valgrind" }
          # gcc-10
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "10" }
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "10", dynamic_test: "asan" }
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "10", dynamic_test: "lsan" }
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "10", dynamic_test: "tsan" }
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "10", dynamic_test: "ubsan" }
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "10", dynamic_test: "valgrind" }
          # gcc-11
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "11" }
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "11", dynamic_test: "asan" }
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "11", dynamic_test: "lsan" }
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "11", dynamic_test: "tsan" }
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "11", dynamic_test: "ubsan" }
          - { os: ubuntu-20.04, compiler: g++, compiler_version: "11", dynamic_test: "valgrind" }
          # clang-9
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "9" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "9", dynamic_test: "asan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "9", dynamic_test: "lsan" }
          #- { os: ubuntu-20.04, compiler: clang++, compiler_version: "9", dynamic_test: "msan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "9", dynamic_test: "tsan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "9", dynamic_test: "ubsan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "9", dynamic_test: "valgrind" }
          # clang-10
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "10" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "10", dynamic_test: "asan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "10", dynamic_test: "lsan" }
          #- { os: ubuntu-20.04, compiler: clang++, compiler_version: "10", dynamic_test: "msan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "10", dynamic_test: "tsan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "10", dynamic_test: "ubsan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "10", dynamic_test: "valgrind" }
          # clang-11
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "11" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "11", dynamic_test: "asan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "11", dynamic_test: "lsan" }
          #- { os: ubuntu-20.04, compiler: clang++, compiler_version: "11", dynamic_test: "msan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "11", dynamic_test: "tsan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "11", dynamic_test: "ubsan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "11", dynamic_test: "valgrind" }
          # clang-12
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "12" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "12", dynamic_test: "asan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "12", dynamic_test: "lsan" }
          #- { os: ubuntu-20.04, compiler: clang++, compiler_version: "12", dynamic_test: "msan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "12", dynamic_test: "tsan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "12", dynamic_test: "ubsan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "12", dynamic_test: "valgrind" }
          # clang-13
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "13" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "13", dynamic_test: "asan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "13", dynamic_test: "lsan" }
          #- { os: ubuntu-20.04, compiler: clang++, compiler_version: "13", dynamic_test: "msan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "13", dynamic_test: "tsan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "13", dynamic_test: "ubsan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "13", dynamic_test: "valgrind" }
          # clang-14
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "14" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "14", dynamic_test: "asan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "14", dynamic_test: "lsan" }
          #- { os: ubuntu-20.04, compiler: clang++, compiler_version: "14", dynamic_test: "msan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "14", dynamic_test: "tsan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "14", dynamic_test: "ubsan" }
          - { os: ubuntu-20.04, compiler: clang++, compiler_version: "14", dynamic_test: "valgrind" }

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install cmake
        uses: lukka/get-cmake@v3.23.0

      - name: Setup Environment
        run: scripts/ci/SetupEnvironment.sh

      - name: Install
        run: scripts/ci/InstallTools.sh ${{ matrix.cfg.compiler }}-${{ matrix.cfg.compiler_version }} gcovr valgrind

      - name: Configure build directory
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_VERBOSE_MAKEFILE=ON ..

      - name: Configure dynamic analysis
        if: matrix.cfg.sanitizer == 0
        run: |
          cd build

          # Address Sanitizer
          if [ "${{ matrix.cfg.dynamic_test }}" = "asan" ]; then
            cmake .. -DENABLE_SANITIZER_ADDRESS=ON            -DCMAKE_CXX_FLAGS="-fsanitize-address-use-after-return=always -fsanitize-address-use-after-scope -fno-omit-frame-pointer -fno-common -fno-optimize-sibling-calls -fno-inline -fno-inline-functions -g3"

          # Leak Sanitizer
          elif [ "${{ matrix.cfg.dynamic_test }}" = "lsan" ]; then
            cmake .. -DENABLE_SANITIZER_LEAK=ON               -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -fno-common -fno-optimize-sibling-calls -fno-inline -fno-inline-functions -g3"

          # Memory Sanitizer
          elif [ "${{ matrix.cfg.dynamic_test }}" = "msan" ]; then
            cmake .. -DENABLE_SANITIZER_MEMORY=ON             -DCMAKE_CXX_FLAGS="-fsanitize-memory-track-origins=2 -fsanitize-memory-use-after-dtor -fno-omit-frame-pointer -fno-common -fno-optimize-sibling-calls -fno-inline -fno-inline-functions -g3"

          # Thread Sanitizer
          elif [ "${{ matrix.cfg.dynamic_test }}" = "tsan" ]; then
            cmake .. -DENABLE_SANITIZER_THREAD=ON             -DCMAKE_CXX_FLAGS="-gline-tables-only -gcolumn-info -fno-omit-frame-pointer -fno-common -fno-optimize-sibling-calls -fno-inline -fno-inline-functions -g3"

          # Undefined Behavior Sanitizer
          elif [ "${{ matrix.cfg.dynamic_test }}" = "ubsan" ]; then
            cmake .. -DENABLE_SANITIZER_UNDEFINED_BEHAVIOR=ON -DCMAKE_CXX_FLAGS="-fno-sanitize-recover=all -fno-omit-frame-pointer -fno-common -fno-optimize-sibling-calls -fno-inline -fno-inline-functions -g3"

          # Valgrind
          elif [ "${{ matrix.cfg.dynamic_test }}" = "valgrind" ]; then
            # Disable failure tests for valgrind
            cmake .. -DPHI_ENABLE_FAILURE_TESTS=Off -DPHI_TEST_WITH_VALGRIND=ON

          # No additional dynamic analysis
          else
            echo Running without extra dynamic analysis
          fi

      - name: Build Debug
        run: |
          cd build

          cmake .. -DCMAKE_BUILD_TYPE=Debug
          cmake --build . --clean-first
          ctest . -C Debug

      - name: Build RelWithDebInfo
        run: |
          cd build

          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
          cmake --build . --clean-first
          ctest . -C RelWithDebInfo

      - name: Build Release
        run: |
          cd build

          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --clean-first
          ctest . -C Release

      - name: Prepare coverage generation
        if: matrix.cfg.sanitizer == 0
        env:
          LCOV_VERSION: "1.15"
        run: |
          # Install lcov
          mkdir lcov
          wget --no-check-certificate -O - "https://github.com/linux-test-project/lcov/releases/download/v${{ env.LCOV_VERSION }}/lcov-${{ env.LCOV_VERSION }}.tar.gz" | tar --strip-components=1 -xz -C lcov
          cd lcov
          sudo make install

          echo "$(pwd)/lcov/bin" >> $GITHUB_PATH

      - name: Build coverage data (Debug)
        if: matrix.cfg.sanitizer == 0
        run: |
          cd build

          # Build it
          cmake -DCMAKE_BUILD_TYPE=Debug -DPHI_COVERAGE_BUILD=ON ..
          cmake --build . --clean-first

          # Generate coverage data
          ctest . -C Debug

      - name: Process coverage data (Debug)
        if: matrix.cfg.sanitizer == 0
        run: |
          lcov --directory build --capture --output-file coverage.info --gcov-tool gcov-${{ env.GCC_VERSION }} # capture coverage info
          lcov --remove coverage.info "/usr/*" --output-file coverage.info # filter out system

          # List debug info
          lcov --list coverage.info # debug info

      - name: Upload coverage data (Debug)
        if: matrix.cfg.sanitizer == 0
        uses: codecov/codecov-action@v2.1.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.info
          flags: ${{ runner.os }},${{ matrix.cfg.compiler }}-${{ matrix.cfg.compiler_version }},Debug
          name: ${{ runner.os }}-${{ matrix.cfg.compiler }}-${{ matrix.cfg.compiler_version }}-${{ env.GCC_VERSION }}-Debug
          fail_ci_if_error: true

      - name: Build coverage data (RelWithDebInfo)
        if: matrix.cfg.sanitizer == 0
        run: |
          cd build

          # Build it
          cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DPHI_COVERAGE_BUILD=ON ..
          cmake --build . --clean-first

          # Generate coverage data
          ctest . -C RelWithDebInfo

      - name: Process coverage data (RelWithDebInfo)
        if: matrix.cfg.sanitizer == 0
        run: |
          lcov --directory build --capture --output-file coverage.info --gcov-tool gcov-${{ env.GCC_VERSION }} # capture coverage info
          lcov --remove coverage.info "/usr/*" --output-file coverage.info # filter out system

          # List debug info
          lcov --list coverage.info # debug info

      - name: Upload coverage data (RelWithDebInfo)
        if: matrix.cfg.sanitizer == 0
        uses: codecov/codecov-action@v2.1.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.info
          flags: ${{ runner.os }},${{ matrix.cfg.compiler }}-${{ matrix.cfg.compiler_version }},RelWithDebInfo
          name: ${{ runner.os }}-${{ matrix.cfg.compiler }}-${{ matrix.cfg.compiler_version }}-${{ env.GCC_VERSION }}-RelWithDebInfo
          fail_ci_if_error: true

      - name: Build coverage data (Release)
        if: matrix.cfg.sanitizer == 0
        run: |
          cd build

          # Build it
          cmake -DCMAKE_BUILD_TYPE=Release -DPHI_COVERAGE_BUILD=ON ..
          cmake --build . --clean-first

          # Generate coverage data
          ctest . -C Release

      - name: Process coverage data (Release)
        if: matrix.cfg.sanitizer == 0
        run: |
          lcov --directory build --capture --output-file coverage.info --gcov-tool gcov-${{ env.GCC_VERSION }} # capture coverage info
          lcov --remove coverage.info "/usr/*" --output-file coverage.info # filter out system

          # List debug info
          lcov --list coverage.info # debug info

      - name: Upload coverage data (Release)
        if: matrix.cfg.sanitizer == 0
        uses: codecov/codecov-action@v2.1.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.info
          flags: ${{ runner.os }},${{ matrix.cfg.compiler }}-${{ matrix.cfg.compiler_version }},Release
          name: ${{ runner.os }}-${{ matrix.cfg.compiler }}-${{ matrix.cfg.compiler_version }}-${{ env.GCC_VERSION }}-Release
          fail_ci_if_error: true
