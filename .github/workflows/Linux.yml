name: Linux

on: [push, pull_request]

jobs:
  Build:
    runs-on: ubuntu-latest

    env:
      CTEST_OUTPUT_ON_FAILURE: ON
      CTEST_PARALLEL_LEVEL: 2

    strategy:
      fail-fast: false
      matrix:
        cfg:
          - { compiler: g++, compiler_version: "10" }
          - { compiler: clang++, compiler_version: "10" }

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      - name: Install cmake
        uses: lukka/get-cmake@latest

      - name: Install
        run: |
          # Adding repositories
          # Add clang repo
          if [ "${{ matrix.cfg.compiler }}" = "clang++" ]; then
            sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-${{ matrix.cfg.compiler_version }} main"
          fi

          # Update repo list
          sudo apt-get update -m

          # Install clang++
          if [ "${{ matrix.cfg.compiler }}" = "clang++" ]; then
            sudo apt-get install "clang-${{ matrix.cfg.compiler_version }}" g++-multilib -y
          fi

          # Install g++
          if [ "${{ matrix.cfg.compiler }}" = "g++" ]; then
            sudo apt-get install "g++-${{ matrix.cfg.compiler_version }}" "g++-${{ matrix.cfg.compiler_version }}-multilib" -y
          fi

          # export compiler
          echo "::set-env name=CXX::${{ matrix.cfg.compiler }}-${{ matrix.cfg.compiler_version }}"

      - name: Configure build directory
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_CXX_COMPILER=${{ matrix.cfg.compiler }}-${{ matrix.cfg.compiler_version }}

      - name: Build Debug
        run: |
          cd build
          cmake --build . --config "Debug" --clean-first
          ctest .

      - name: Build RelWithDebInfo
        run: |
          cd build
          cmake --build . --config "RelWithDebInfo" --clean-first
          ctest .

      - name: Build Release
        run: |
          cd build
          cmake --build . --config "Release" --clean-first
          ctest .

      - name: Generate warnings
        run: |
          # Build
          cd build
          cmake --build .  --config "Debug" --clean-first 2> build.log

          # Filter out warnings for external dependencies
          cat build.log | grep -Ev "Phi/external" > build_filtered.log || true

      - name: ReviewDog check
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat build_filtered.log | reviewdog -efm="%f:%l:%c: warning: %m" -diff="git diff" -reporter=github-check -name "Linux ${{ matrix.cfg.compiler }}-${{ matrix.cfg.compiler_version }} warnings" -level warning

      - name: ReviewDog Review
        if: ${{ github.event_name == 'pull_request' }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat build_filtered.log | reviewdog -efm="%f:%l:%c: warning: %m" -diff="git diff" -reporter=github-pr-review -name "Linux ${{ matrix.cfg.compiler }}-${{ matrix.cfg.compiler_version }} warnings" -level warning