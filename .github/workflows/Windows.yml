name: Windows

on: [push, pull_request]

jobs:
  Build:
    runs-on: windows-latest

    env:
      CMAKE_BUILD_PARALLEL_LEVEL: "2"
      CTEST_PARALLEL_LEVEL: "2"
      CTEST_OUTPUT_ON_FAILURE: "ON"
      CMAKE_GENERATOR: 'Ninja'
      # Sanitizers
      ASAN_OPTIONS: "quarantine_size_mb=1024:redzone=256:strict_string_checks=1:detect_odr_violation=2:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=3:detect_leaks=1:print_stats=1:use_odr_indicator=1:strict_memcmp=1:print_scariness=1:handle_abort=1:symbolize=1:handle_segv=1:handle_sigill=1:allocator_release_to_os_interval_ms=500:handle_sigfpe=1:handle_sigbus=1:alloc_dealloc_mismatch=1:check_malloc_usable_size=1"
      LSAN_OPTIONS: "report_objects=1:use_unaligned=1"
      TSAN_OPTIONS: "halt_on_error=1:history_size=3:force_seq_cst_atomics=1"
      UBSAN_OPTIONS: "print_stacktrace=1:report_error_type=1"

    strategy:
      fail-fast: false
      matrix:
        cfg:
          - { compiler: cl }
          #- { compiler: g++ }
          - { compiler: clang++ }
          - { compiler: clang++, sanitizer: "ubsan" }

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install cmake
        uses: lukka/get-cmake@v3.22.2

      - name: Install
        shell: powershell
        run: |
          # Install scoop
          iwr -useb get.scoop.sh -outfile 'install.ps1'
          # Required since CI runner is admin
          # See https://github.com/ScoopInstaller/Install#for-admin
          .\install.ps1 -RunAsAdmin

          # Install required compilers
          if ("${{ matrix.cfg.compiler }}".StartsWith("clang")) {
            # Clang
            scoop install llvm --global
            echo "CXX=${{ matrix.cfg.compiler }}" >> $GITHUB_ENV
            echo "C:\ProgramData\scoop\apps\llvm\current\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          }
          elseif ("${{ matrix.cfg.compiler }}" -eq "g++") {
            # GCC
            scoop install gcc --global
            echo "CXX=${{ matrix.cfg.compiler }}" >> $GITHUB_ENV
            echo "C:\ProgramData\scoop\apps\gcc\current\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          }

          scoop install ninja --global

      - name: Setup msvc dev
        if: matrix.cfg.compiler == 'cl'
        uses: ilammy/msvc-dev-cmd@v1.10.0

      - name: Configure build directory
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_VERBOSE_MAKEFILE=ON ..

      - name: Configure Sanitizers
        shell: bash
        run: |
          cd build

          # Address Sanitizer
          if [ "${{ matrix.cfg.sanitizer }}" = "asan" ]; then
            cmake .. -DENABLE_SANITIZER_ADDRESS=ON            -DPHI_STANDARD_RUNTIME="Static" -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -fno-common -g"

          # Leak Sanitizer
          elif [ "${{ matrix.cfg.sanitizer }}" = "lsan" ]; then
            cmake .. -DENABLE_SANITIZER_LEAK=ON               -DPHI_STANDARD_RUNTIME="Static" -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -g"

          # Memory Sanitizer
          elif [ "${{ matrix.cfg.sanitizer }}" = "msan" ]; then
            cmake .. -DENABLE_SANITIZER_MEMORY=ON             -DPHI_STANDARD_RUNTIME="Static" -DCMAKE_CXX_FLAGS="-fsanitize-memory-track-origins=2 -fsanitize-memory-use-after-dtor -fno-omit-frame-pointer -g"

          # Thread Sanitizer
          elif [ "${{ matrix.cfg.sanitizer }}" = "tsan" ]; then
            cmake .. -DENABLE_SANITIZER_THREAD=ON             -DPHI_STANDARD_RUNTIME="Static" -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -g"

          # Undefined Behavior Sanitizer
          elif [ "${{ matrix.cfg.sanitizer }}" = "ubsan" ]; then
            cmake .. -DENABLE_SANITIZER_UNDEFINED_BEHAVIOR=ON -DPHI_STANDARD_RUNTIME="Static" -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -g"

          # No Sanitizer
          else
            echo Running without sanitizer
          fi

      - name: Build Debug
        if: matrix.cfg.sanitizer == 0
        shell: bash
        run: |
          cd build

          cmake .. -DCMAKE_BUILD_TYPE=Debug
          cmake --build . --config "Debug" --clean-first
          ctest . -C Debug

      - name: Build RelWithDebInfo
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
          cmake --build . --config "RelWithDebInfo" --clean-first
          ctest . -C RelWithDebInfo

      - name: Build Release
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config "Release" --clean-first
          ctest . -C Release
