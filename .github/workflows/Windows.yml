name: Windows

on: [push, pull_request]

jobs:
  Build:
    name: "Build (${{ matrix.cfg.compiler }})"
    runs-on: windows-latest

    env:
      CTEST_OUTPUT_ON_FAILURE: ON
      CTEST_PARALLEL_LEVEL: 2
      CMAKE_GENERATOR: 'Ninja'

    strategy:
      fail-fast: false
      matrix:
        cfg:
          - { compiler: cl, error_format: "%f(%l,%c): warning %m" }
          - { compiler: g++, error_format: "%f:%l:%c: warning: %m" }
          - { compiler: clang++, error_format: "%f:%l:%c: warning: %m" }

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      - name: Install cmake
        uses: lukka/get-cmake@latest

      - name: Install
        shell: powershell
        run: |
          # Install scoop
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')

          # Install required compilers
          if ("${{ matrix.cfg.compiler }}".StartsWith("clang")) {
            # Clang
            scoop install llvm --global
            echo "::set-env name=CXX::${{ matrix.cfg.compiler }}"
          }
          elseif ("${{ matrix.cfg.compiler }}" -eq "g++") {
            # GCC
            scoop install gcc --global
            echo "::set-env name=CXX::${{ matrix.cfg.compiler }}"
          }

          scoop install ninja --global

          # Scoop modifies the PATH so we make the modified PATH global.
          echo "::set-env name=PATH::$env:PATH"

      - name: Setup msvc dev
        if: matrix.cfg.compiler == 'cl'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure build directory
        run: |
          mkdir build
          cd build
          cmake ..

      - name: Build Debug
        shell: bash
        run: |
          cd build

          # Workaround for gcc-8.3 being broken on windows when using IPO on debug builds
          if [ "${{ matrix.cfg.compiler }}" = "g++" ]; then
            cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=Off -DENABLE_IPO=Off
          else
            cmake .. -DCMAKE_BUILD_TYPE=Debug
          fi
          cmake --build . --config "Debug" --clean-first
          ctest .

          # Reenable IPO for gcc
          if [ "${{ matrix.cfg.compiler }}" = "g++" ]; then
            cmake .. -DENABLE_IPO=ON
          fi

      - name: Build RelWithDebInfo
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
          cmake --build . --config "RelWithDebInfo" --clean-first
          ctest .

      - name: Build Release
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config "Release" --clean-first
          ctest .

      - name: Build & Test with Address Sanitizer
        env:
          ASAN_OPTIONS: "strict_string_checks=true:detect_odr_violation=2:detect_stack_use_after_return=true:check_initialization_order=true:strict_init_order=true:detect_invalid_pointer_pairs=3"
        if: matrix.cfg.compiler == 'clang++'
        run: |
          # Create directory
          mkdir build-asan
          cd build-asan

          # Configure
          cmake .. -DENABLE_SANITIZER_ADDRESS=ON -DPHI_STANDARD_RUNTIME="Static" -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -fno-common -g"

          # RelWithDebInfo
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
          cmake --build . --clean-first
          ctest .

          # Release
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --clean-first
          ctest .

      - name: Build & Test with Leak Sanitizer
        if: matrix.cfg.compiler != 'cl'
        run: |
          # Create directory
          mkdir build-lsan
          cd build-lsan

          # Configure
          cmake .. -DENABLE_SANITIZER_LEAK=ON -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -g"

          # Debug
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          cmake --build . --clean-first
          ctest .

          # RelWithDebInfo
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
          cmake --build . --clean-first
          ctest .

          # Release
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --clean-first
          ctest .

      - name: Build & Test with Memory Sanitizer
        continue-on-error: true
        if: matrix.cfg.compiler == 'clang++'
        run: |
          # Create directory
          mkdir build-msan
          cd build-msan

          # Configure
          cmake .. -DENABLE_SANITIZER_MEMORY=ON -DCMAKE_CXX_FLAGS="-fsanitize-memory-track-origins=2 -fsanitize-memory-use-after-dtor -fno-omit-frame-pointer -g"

          # Debug
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          cmake --build . --clean-first
          ctest .

          # RelWithDebInfo
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
          cmake --build . --clean-first
          ctest .

          # Release
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --clean-first
          ctest .

      - name: Build & Test with Thread Sanitizer
        env:
          TSAN_OPTIONS: "force_seq_cst_atomics=1"
        if: matrix.cfg.compiler != 'cl'
        run: |
          # Create directory
          mkdir build-tsan
          cd build-tsan

          # Configure
          cmake .. -DENABLE_SANITIZER_THREAD=ON -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -g"

          # Debug
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          cmake --build . --clean-first
          ctest .

          # RelWithDebInfo
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
          cmake --build . --clean-first
          ctest .

          # Release
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --clean-first
          ctest .

      - name: Build & Test with Undefined Behaviour Sanitizer
        env:
          UBSAN_OPTIONS: "print_stacktrace=1"
        if: matrix.cfg.compiler != 'cl'
        run: |
          # Create directory
          mkdir build-ubsan
          cd build-ubsan

          # Configure
          cmake .. -DENABLE_SANITIZER_UNDEFINED_BEHAVIOR=ON -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -g"

          # Debug
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          cmake --build . --clean-first
          ctest .

          # RelWithDebInfo
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
          cmake --build . --clean-first
          ctest .

          # Release
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --clean-first
          ctest .

      - name: Generate warnings
        shell: bash
        run: |
          # Build
          mkdir build-warnings
          cd build-warnings
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          cmake --build . --config "Debug" --clean-first 2> build.log

          # Filter out warnings for external dependencies
          cat build.log | grep -Ev "Phi/external" > build_filtered.log || true

          # Print logs
          cat build_filtered.log

      - name: ReviewDog check
        shell: bash
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat build-warnings/build_filtered.log | reviewdog -efm="${{ matrix.cfg.error_format }}" -diff="git diff" -reporter=github-check -name "Windows ${{ matrix.cfg.compiler }} warnings" -level warning

      - name: ReviewDog Review
        shell: bash
        if: ${{ github.event_name == 'pull_request' }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat build-warnings/build_filtered.log | reviewdog -efm="${{ matrix.cfg.error_format }}" -diff="git diff" -reporter=github-pr-review -name "Windows ${{ matrix.cfg.compiler }} warnings" -level warning
