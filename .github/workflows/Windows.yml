name: Windows

on: [push, pull_request]

jobs:
  Build:
    runs-on: windows-latest

    env:
      CTEST_OUTPUT_ON_FAILURE: ON
      CTEST_PARALLEL_LEVEL: 2

    strategy:
      fail-fast: false
      matrix:
        cfg:
          - { compiler: cl, error_format: "%f(%l,%c): warning %m" }
          - { compiler: g++, error_format: "%f:%l:%c: warning: %m" }
          - { compiler: clang++, error_format: "%f:%l:%c: warning: %m" }

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      - name: Install cmake
        uses: lukka/get-cmake@latest

      - name: Install
        shell: powershell
        run: |
          # Install scoop
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')

          # Install required compilers
          if ("${{ matrix.cfg.compiler }}".StartsWith("clang")) {
            # Clang
            scoop install llvm --global
            echo "::set-env name=CMAKE_CXX_COMPILER::${{ matrix.cfg.compiler }}"
          }
          elseif ("${{ matrix.cfg.compiler }}" -eq "g++") {
            # GCC
            scoop install gcc --global
            echo "::set-env name=CMAKE_CXX_COMPILER::g++"
          }

          # Scoop modifies the PATH so we make the modified PATH global.
          echo "::set-env name=PATH::$env:PATH"

      - name: Setup msbuild
        uses: microsoft/setup-msbuild@v1

      - name: Configure build directory
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_CXX_COMPILER=${{ matrix.cfg.compiler }}

      - name: Build Debug
        run: |
          cd build
          cmake --build . --config "Debug" --clean-first
          ctest .

      - name: Build RelWithDebInfo
        run: |
          cd build
          cmake --build . --config "RelWithDebInfo" --clean-first
          ctest .

      - name: Build Release
        run: |
          cd build
          cmake --build . --config "Release" --clean-first
          ctest .

      - name: Generate warnings
        run: |
          # Build
          cd build
          cmake --build .  --config "Debug" --clean-first 2> build.log

          # Filter out warnings for external dependencies
          cat build.log | grep -Ev "Phi/external" > build_filtered.log || true

      - name: ReviewDog check
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat build_filtered.log | reviewdog -efm="${{ matrix.cfg.error_format }}" -diff="git diff" -reporter=github-check -name "Windows ${{ matric.cfg.compiler }} warnings"

      - name: ReviewDog Review
        if: ${{ github.event_name == 'pull_request' }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat build_filtered.log | reviewdog -efm="${{ matrix.cfg.error_format }}" -diff="git diff" -reporter=github-pr-review -name "Windows ${{ matric.cfg.compiler }} warnings"
