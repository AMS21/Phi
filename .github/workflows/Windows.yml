name: Windows

on:
  push:
    paths:
      # Workflow file itself
      - '.github/workflows/Windows.yml'
      # C++ files
      - '**.cpp'
      - '**.hpp'
      # CMake files
      - '**.cmake'
      - '**.txt'
      # Script files
      - '**.sh'
    tags:
    branches-ignore:
      - 'dependabot/**'
  pull_request:
    branches:
      - main
      - develop
  release:
    types: [published]
  workflow_dispatch:

# Default windows to use bash
defaults:
  run:
    shell: bash

concurrency:
  group: ci-${{ github.head_ref || github.run_number }}-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  msvc:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os:
          # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2016-Readme.md
          - "windows-2016"
          # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
          - "windows-2019"
          # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2022-Readme.md
          - "windows-2022"

        arch: [x64, x86]

        build_type:
          - "Debug"
          - "RelWithDebInfo"
          - "Release"

        dynamic_test:
          - "none"
          - "coverage"
          - "asan"

        standard:
          - "14"
          - "17"
          - "20"
          - "23"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Environment
        run: scripts/ci/SetupEnvironment.sh

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1.11.0
        with:
          arch: ${{ matrix.arch }}

      - name: Setup coverage tools
        if: ${{ matrix.dynamic_test == 'coverage' }}
        uses: aminya/setup-cpp@v1
        with:
          gcovr: true
          opencppcoverage: true

      - name: Configure build directory
        run: |
          mkdir build -p
          cd build

          # Export dynamic test mode
          echo "PHI_DYNAMIC_TEST=${{ matrix.dynamic_test }}" >> $GITHUB_ENV

          cmake .. -DCMAKE_BUILD_TYPE:STRING=${{ matrix.build_type }} -DPHI_TEST_WITH_ALL_STANDARDS:BOOL=OFF -DPHI_STANDARD:STRING=${{ matrix.standard }}

      - name: Build
        working-directory: ./build
        run: cmake --build . --config ${{ matrix.build_type }}

      - name: Run tests
        if: ${{ matrix.dynamic_test != 'coverage' }}
        working-directory: ./build
        run: ctest . -C ${{ matrix.build_type }}

      - name: Test with coverage
        if: ${{ matrix.dynamic_test == 'coverage' }}
        working-directory: ./build
        run: OpenCppCoverage.exe --export_type cobertura:coverage.xml --cover_children -- ctest . -C ${{ matrix.build_type }} --timeout 18000

      - name: Upload coverage data
        if: ${{ matrix.dynamic_test == 'coverage' }}
        uses: codecov/codecov-action@v3.1.0
        with:
          file: ./build/coverage.xml
          flags: ${{ runner.os }},msvc-${{ matrix.os }},${{ matrix.build_type }},${{ matrix.arch }}
          name: ${{ runner.os }}-msvc-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.standard }}-${{ matrix.arch }}

  clang:
    runs-on: windows-2022

    strategy:
      fail-fast: false

      matrix:
        build_type:
          - "Debug"
          - "RelWithDebInfo"
          - "Release"

        dynamic_test:
          - "none"
          - "coverage"
          - "ubsan"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Environment
        run: |
          scripts/ci/SetupEnvironment.sh

          # Export dynamic test mode
          echo "PHI_DYNAMIC_TEST=${{ matrix.dynamic_test }}" >> $GITHUB_ENV

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-clang
          variant: sccache

      - name: Install compiler
        shell: powershell
        run: |
          # Install scoop
          iwr -useb get.scoop.sh -outfile 'install.ps1'
          # Required since CI runner is admin
          # See https://github.com/ScoopInstaller/Install#for-admin
          .\install.ps1 -RunAsAdmin

          scoop install ninja llvm --global

          echo "CXX=clang++" >> $GITHUB_ENV
          echo "C:\ProgramData\scoop\apps\llvm\current\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\ProgramData\scoop\apps\ninja\current"    | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install gcovr
        if: ${{ matrix.dynamic_test == 'coverage' }}
        run: pip install gcovr

      - name: Configure build directory
        run: |
          mkdir build -p
          cd build

          cmake .. -DCMAKE_BUILD_TYPE:STRING=${{ matrix.build_type }}

      - name: Build
        working-directory: ./build
        run: cmake --build . --config ${{ matrix.build_type }}

      - name: Run tests
        working-directory: ./build
        run: ctest . -C ${{ matrix.build_type }}

      - name: Process coverage data
        working-directory: ./build
        if: ${{ matrix.dynamic_test == 'coverage' }}
        run: gcovr -j $PROC_COUNT --delete --root ../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable 'llvm-cov gcov'

      - name: Upload coverage data
        if: ${{ matrix.dynamic_test == 'coverage' }}
        uses: codecov/codecov-action@v3.1.0
        with:
          file: ./build/coverage.xml
          flags: ${{ runner.os }},clang,${{ matrix.build_type }}
          name: ${{ runner.os }}-clang-${{ matrix.build_type }}

  gcc:
    runs-on: windows-2022

    strategy:
      fail-fast: false

      matrix:
        build_type:
          - "Debug"
          - "RelWithDebInfo"
          - "Release"

        dynamic_test:
          - "none"
          - "coverage"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Environment
        run: |
          scripts/ci/SetupEnvironment.sh

          # Export dynamic test mode
          echo "PHI_DYNAMIC_TEST=${{ matrix.dynamic_test }}" >> $GITHUB_ENV

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-gcc
          variant: sccache

      - name: Install compiler
        shell: powershell
        run: |
          # Install scoop
          iwr -useb get.scoop.sh -outfile 'install.ps1'
          # Required since CI runner is admin
          # See https://github.com/ScoopInstaller/Install#for-admin
          .\install.ps1 -RunAsAdmin

          scoop install ninja gcc --global

          echo "CXX=g++" >> $GITHUB_ENV
          echo "C:\ProgramData\scoop\apps\gcc\current\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\ProgramData\scoop\apps\ninja\current"    | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install gcovr
        if: ${{ matrix.dynamic_test == 'coverage' }}
        run: pip install gcovr

      - name: Configure build directory
        run: |
          mkdir build -p
          cd build

          cmake .. -DCMAKE_BUILD_TYPE:STRING=${{ matrix.build_type }}

      - name: Build
        working-directory: ./build
        run: cmake --build . --config ${{ matrix.build_type }}

      - name: Run tests
        working-directory: ./build
        run: ctest . -C ${{ matrix.build_type }}

      - name: Process coverage data
        working-directory: ./build
        if: ${{ matrix.dynamic_test == 'coverage' }}
        run: gcovr -j $PROC_COUNT --delete --root ../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable 'gcov'

      - name: Upload coverage data
        if: ${{ matrix.dynamic_test == 'coverage' }}
        uses: codecov/codecov-action@v3.1.0
        with:
          file: ./build/coverage.xml
          flags: ${{ runner.os }},gcc,${{ matrix.build_type }}
          name: ${{ runner.os }}-gcc-${{ matrix.build_type }}
