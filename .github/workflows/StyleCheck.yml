name: StyleCheck

on: pull_request

jobs:
  format:
    runs-on: ubuntu-latest
    env:
      LLVM_VERSION: 11
      CMAKE_BUILD_PARALLEL_LEVEL: "2"
      CTEST_PARALLEL_LEVEL: "2"
      CTEST_OUTPUT_ON_FAILURE: "ON"

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.PAT }}

      - uses: actions/setup-python@v2.2.1
        with:
          python-version: '3.x'

      - name: Install cmake
        uses: lukka/get-cmake@v3.19.2

      - name: Install clang-format
        run: |
          # Install clang-format
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -

          sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-${{ env.LLVM_VERSION }} main"
          sudo apt-get update -m
          sudo apt-get install clang-format-${{ env.LLVM_VERSION }}

      - name: Run clang-format
        run: |
          clang-format-${{ env.LLVM_VERSION }} -i $(find -iname "*.[hc]pp" -type f)

      - name: Install cmake-format
        run: |
          # Install cmake-format
          sudo -H pip3 install --upgrade pip
          sudo -H pip3 install cmake-format

      - name: Run cmake-format
        run: |
          cmake-format -c ".cmake-format.yaml" -i $(find -iregex "./.*\.cmake" -or -iregex "./.*\CMakeLists\.txt")

      - name: Fix spacing
        run: |
          # Install moreutils
          sudo apt-get install moreutils

          # Fix mixed tabs and spaces
          find . -iregex '.*\.\(hpp\|cpp\|yaml\|yml\|md\|txt\|cmake\)' -type f -exec bash -c 'expand -t 4 "$0" | sponge "$0"' {} \;
          # Fix trailing white spaces
          find . -iregex '.*\.\(hpp\|cpp\|yaml\|yml\|md\|txt\|cmake\)' -type f -exec bash -c 'sed -i '' -e's/[[:space:]]*$//' "$0"' {} \;
          # Ensure files end with new line
          find . -iregex '.*\.\(hpp\|cpp\|yaml\|yml\|md\|txt\|cmake\)' -type f -exec bash -c 'tail -c1 < "$0" | read -r _ || echo >> "$0"' {} \;

      - name: Fix encoding
        run: |
          # Install 'dos2unix' and 'recode'
          sudo apt-get install dos2unix recode

          # Ensure that files are UTF-8 formatted
          find . -iregex '.*\.\(hpp\|cpp\|yaml\|yml\|md\|txt\|cmake\)' -type f -exec bash -c 'recode UTF-8 "$0" 2> /dev/null' {} \;
          # Ensure that files have LF line endings and do not contain a BOM.
          find . -iregex '.*\.\(hpp\|cpp\|yaml\|yml\|md\|txt\|cmake\)' -type f -exec bash -c 'dos2unix "$0" 2> /dev/null' {} \;

      - name: Clang-tidy fixes
        run: |
          # Install clang-tidy
          sudo apt-get install clang-tidy-${{ env.LLVM_VERSION }} clang-${{ env.LLVM_VERSION }}
          export CXX="clang++-${{ env.LLVM_VERSION }}"

          # Pull submodules
          git submodule update --init --recursive

          # Create build directory
          mkdir build
          cd build

          # Generate compile_commands.json
          cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DPHI_ENABLE_CONSTEXPRTESTS=Off -DPHI_ENABLE_FAILURE_TESTS=Off

          # Run clang-tidy
          run-clang-tidy-${{ env.LLVM_VERSION }} -fix -header-filter ".*" -checks="-*,bugprone-argument-comment,bugprone-reserved-identifier,cppcoreguidelines-pro-type-cstyle-cast,modernize-deprecated-headers,modernize-make-shared,modernize-make-unique,modernize-pass-by-value,modernize-raw-string-literal,modernize-redundant-void-arg,modernize-use-equals-default,modernize-use-equals-delete,modernize-use-nodiscard,modernize-use-nullptr,modernize-use-override,modernize-use-using,readability-braces-around-statements,readability-container-size-empty,readability-identifier-naming,readability-inconsistent-declaration-parameter-name,readability-isolate-declaration,readability-make-member-function-const,readability-qualified-auto,readability-redundant-control-flow,readability-simplify-boolean-expr"

          # Clang tidy likes to "fix" things in externals libraries so we need to reset them
          cd ../external/spdlog
          git reset --hard

      - name: Display diff
        run: git diff

      - name: Build
        run: |
          # The applied fixes might break the code so make sure it still compiles
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DPHI_ENABLE_CONSTEXPRTESTS=On -DPHI_ENABLE_FAILURE_TESTS=On
          cmake --build . --clean-first
          ctest . -C Debug

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v3.1.0
        with:
          gpg-private-key: ${{ secrets.BOT_PRIVATE_KEY }}
          passphrase: ${{ secrets.BOT_KEY_PASSPHRASE }}
          git-user-signingkey: true
          git-commit-gpgsign: true

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4.9.1
        continue-on-error: true  # Ignore errors
        with:
          commit_message: Applied automatic formatting and fixes
          branch: ${{ github.head_ref }}
          commit_options: '-S --no-verify --signoff'
          commit_user_name: Phi Code Quality Bot
          commit_user_email: AMS21Bot.github@gmail.com
          commit_author: AMS21Bot <AMS21Bot.github@gmail.com>
          file_pattern: .github/* .licenses/* docs/* examples/* external/CMakeLists.txt libs/* scripts/* tests/* tools/* .cmake-format.yaml CMakeLists.txt README.md

  misspell:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Run misspell with reviewdog
        uses: reviewdog/action-misspell@v1.7
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          locale: US
          reporter: github-pr-check
          level: warning

  yamllint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: yamllint
        uses: reviewdog/action-yamllint@v1.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-check
          yamllint_flags: '-d "{extends: relaxed, rules: {line-length: {max: 100}}}"'
          level: warning

  markdownlint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: markdownlint
        uses: prologic/action-markdownlint@v0.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-check
          level: warning

  remark-lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: remark-lint
        uses: prologic/action-remark-lint@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-check
          level: warning

  languagetool:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - uses: reviewdog/action-languagetool@v1.5
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-check
          level: warning

  alex:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - uses: reviewdog/action-alex@v1.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-check
          level: warning
