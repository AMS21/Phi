name: StaticAnalysis

on:
  push:
    paths:
      # Workflow file itself
      - '.github/workflows/StaticAnalysis.yml'
      # C++ files
      - '**.cpp'
      - '**.hpp'
      # CMake files
      - '**.cmake'
      - '**.txt'
      # Script files
      - '**.sh'
      # dotfiles
      - '.clang-tidy'
      - '.cmake-format.yaml'
    tags:
    branches-ignore:
      - 'dependabot/**'
  pull_request:
    branches:
      - main
      - develop
  release:
    types: [published]
  workflow_dispatch:
  schedule:
    - cron: '0 4 * * 1'

jobs:
  cppcheck:
    runs-on: ubuntu-20.04
    env:
      LLVM_VERSION: 14

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: reviewdog/action-setup@v1.0.3
        with:
          reviewdog_version: latest

      - name: Install
        env:
          CPPCHECK_VERSION: "2.7"
        run: scripts/ci/InstallTools.sh clang-${{ env.LLVM_VERSION }} cppcheck-${{ env.CPPCHECK_VERSION }} ninja

      - name: Configure
        run: |
          # Create build directory
          mkdir build
          cd build

          # Generate compile_commands.json
          cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DPHI_TEST_WITH_ALL_STANDARDS=OFF

      - name: Run cppcheck
        run: |
          cppcheck --project=build/compile_commands.json --enable=all --inconclusive --inline-suppr --template='{file}:{line}:{column}: {severity}: {message} [{id}](CWE {cwe})' -DPHI_CONFIG_ALWAYS_INLINE_OVERWRITE=inline -DPHI_CONFIG_NEVER_INLINE_OVERWRITE="" --suppress=missingInclude --suppress=unusedFunction --suppress=unmatchedSuppression 2> cppcheck.log

          # Filter out external libraries and test code
          cat cppcheck.log | grep -Ev "Phi/external|Phi/tests|tests/integration" > cppcheck_filtered.log || true

      - name: Print results
        run: cat cppcheck_filtered.log

      - name: ReviewDog check
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat cppcheck_filtered.log | reviewdog -efm="%f:%l:%c: %m" -diff="git diff HEAD~1" -reporter=github-check -name CppCheck -level warning

  clang-tidy:
    runs-on: ubuntu-20.04
    env:
      LLVM_VERSION: 14

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: reviewdog/action-setup@v1.0.3
        with:
          reviewdog_version: latest

      - uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install
        run: scripts/ci/InstallTools.sh clang-tidy-${{ env.LLVM_VERSION }} ninja

      - name: Run clang-tidy
        run: |
          # Create build directory
          mkdir build
          cd build

          # Generate compile_commands.json
          cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DPHI_ENABLE_CONSTEXPRTESTS=Off -DPHI_ENABLE_FAILURE_TESTS=Off -DPHI_TEST_WITH_ALL_STANDARDS=Off

          # Run clang-tidy
          run-clang-tidy-${{ env.LLVM_VERSION }} -quiet -header-filter ".*" | tee clang_tidy.log

          # Filter out external libraries and test code
          cat clang_tidy.log | grep -Ev "Phi/external|Phi/tests|tests/integration" > clang_tidy_filtered.log || true

          # Remove duplicate entries
          sort clang_tidy_filtered.log | uniq -d > clang_tidy_output.log

      - name: Print results
        run: cat build/clang_tidy_output.log

      - name: ReviewDog check
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat build/clang_tidy_output.log | reviewdog -efm="%f:%l:%c: warning: %m" -diff="git diff HEAD~1" -reporter=github-check -name Clang-Tidy -level warning

  include-what-you-use:
    runs-on: ubuntu-20.04
    env:
      LLVM_VERSION: 14
      CMAKE_BUILD_PARALLEL_LEVEL: "2"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - uses: reviewdog/action-setup@v1.0.3
        with:
          reviewdog_version: latest

      - name: Install
        run: scripts/ci/InstallTools.sh iwyu-${{ env.LLVM_VERSION }} ninja

      - name: Run Include-What-You-Use
        run: |
          # Create build directory
          mkdir build
          cd build

          # Configure
          cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DPHI_ENABLE_CONSTEXPRTESTS=Off -DPHI_ENABLE_FAILURE_TESTS=Off

          # Run include-what-you-use
          iwyu_tool.py -p . -o clang -- -Xiwyu --cxx17ns | tee iwyu.log

          # Filter out correct includes and generated code
          cat iwyu.log | grep -Ev "#includes/fwd-decls are correct|tests/integration" > iwyu_filtered.log || true

      - name: Print results
        run: cat build/iwyu_filtered.log

      - name: ReviewDog check
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat build/iwyu_filtered.log | reviewdog -efm="%Z%A%f:%l:%c: error: %m" -efm="%C%m" -diff="git diff HEAD~1" -reporter=github-check -name include-what-you-use -level warning

  cmake-lint:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: reviewdog/action-setup@v1.0.3
        with:
          reviewdog_version: latest

      - uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install
        run: scripts/ci/InstallTools.sh cmake-format

      - name: Run cmake-lint
        run: |
          cmake-lint $(find -iregex "./.*\.cmake" -or -iregex "./.*\CMakeLists\.txt") -c ".cmake-format.yaml" --suppress-decorations --outfile-path cmake_lint.log || true

      - name: Print results
        run: cat cmake_lint.log

      - name: ReviewDog check
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat cmake_lint.log | reviewdog -efm="%f:%l: %m" -diff="git diff HEAD~1" -reporter=github-check -name cmake-lint -level warning

  pvs-studio:
    runs-on: ubuntu-20.04
    env:
      LLVM_VERSION: 14
      CMAKE_BUILD_PARALLEL_LEVEL: "2"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: reviewdog/action-setup@v1.0.2
        with:
          reviewdog_version: latest

      - name: Install
        run: scripts/ci/InstallTools.sh clang-${{ env.LLVM_VERSION }} pvs-studio ninja

      - name: Configure build directory
        run: |
          mkdir build -p
          cd build

          # Configure
          cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DPHI_ENABLE_CONSTEXPRTESTS=Off -DPHI_ENABLE_FAILURE_TESTS=Off

      - name: Run PVS-Studio
        working-directory: ./build
        run: |
          # Create License
          pvs-studio-analyzer credentials ${{ secrets.PVS_USERNAME }} ${{ secrets.PVS_KEY }} -o PVS-Studio.lic

          # Run analysis
          pvs-studio-analyzer analyze --threads $(nproc) --lic-file PVS-Studio.lic --output-file PVS-Studio.log --exclude-path ../external --disableLicenseExpirationCheck

          # Convert to readable format
          plog-converter --renderTypes errorfile PVS-Studio.log --analyzer "GA:1,2,3;OP:1,2,3;64:1,2,3;CS:1,2,3" --output PVS-Studio.err

          # Filter out external libraries, test code and help message
          cat PVS-Studio.err | grep -Ev "Phi/external|Phi/tests|https://www.viva64.com/en/w/" > PVS-Studio_filtered.err || true

      - name: Print results
        run: cat build/PVS-Studio_filtered.err

      - name: ReviewDog check
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat build/PVS-Studio_filtered.err | reviewdog -efm="%f:%l:%c: %m" -diff="git diff HEAD~1" -reporter=github-check -name PVS-Studio -level warning

  code-ql:
    runs-on: ubuntu-20.04

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false

      matrix:
        language: [ 'cpp' ]

        compiler:
          - 'gcc-11'
          - 'clang-14'

        build_type:
          - 'Debug'
          - 'RelWithDebInfo'
          - 'Release'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}

      - name: Setup Environment
        run: scripts/ci/SetupEnvironment.sh

      - name: Install compiler
        run: scripts/ci/InstallTools.sh ${{ matrix.compiler }} ninja

      - name: Configure build directory
        run: |
          mkdir build -p
          cd build

          cmake -DCMAKE_BUILD_TYPE:STRING=${{ matrix.build_type }} -DPHI_COVERAGE_BUILD=${{ matrix.build_type == 'Debug' }} ..

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        # Override language selection by uncommenting this and choosing your languages
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.
          # queries: ./path/to/local/query, your-org/your-repo/queries@main

      - name: Build
        working-directory: build
        run: cmake --build . --config ${{ matrix.build_type }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  mull:
    runs-on: ubuntu-20.04
    env:
      LLVM_VERSION: 14
      CMAKE_BUILD_PARALLEL_LEVEL: "2"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Environment
        run: scripts/ci/SetupEnvironment.sh

      - uses: reviewdog/action-setup@v1.0.3
        with:
          reviewdog_version: latest

      - name: Install compiler
        run: scripts/ci/InstallTools.sh clang-${{ env.LLVM_VERSION }} ninja

      - name: Install mull
        run: |
          curl -1sLf 'https://dl.cloudsmith.io/public/mull-project/mull-stable/setup.deb.sh' | sudo -E bash

          sudo apt-get update
          sudo apt-get install mull-${{ env.LLVM_VERSION }}

          # Verify everythings works
          mull-cxx-${{ env.LLVM_VERSION }} --version

      - name: Get clang include paths
        run: |
          clang++-${{ env.LLVM_VERSION }} -x c++ -c /dev/null --verbose &> clang_includes.txt
          grep -ozP '(?s)#include <...> search starts here:\n\K.*?(?=\nEnd of search list.\Z)' clang_includes.txt | head -c -1 | sed -e "s/.*/-isystem&/" | tr '\n' ' ' > clang_includes_filtered.txt

          cat clang_includes.txt
          echo "CLANG_INCLUDES=$(cat clang_includes_filtered.txt)" >> $GITHUB_ENV

      - name: Configure
        run: |
          # Create build directory
          mkdir build
          cd build

          # Generate compile_commands.json
          cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DPHI_ENABLE_CONSTEXPRTESTS=Off -DPHI_ENABLE_FAILURE_TESTS=Off -DCMAKE_CXX_FLAGS="-fembed-bitcode -g -O0" -DCMAKE_BUILD_TYPE=Debug

      - name: Build
        working-directory: ./build
        run: cmake --build .

      - name: Run mull
        run: |
          cd build
          find bin -type f -iname "Phi_Unittest_*" -exec bash -c 'mull-cxx-${{ env.LLVM_VERSION }} -linker=clang++-${{ env.LLVM_VERSION }} -compdb-path compile_commands.json -compilation-flags="$CLANG_INCLUDES" -exclude-path="../external/.*" ./$0' {} \; 2>&1 | tee --append mull_report.log

          # Remove duplicate entries
          sort mull_report.log | uniq -d > mull_report_filtered.log

      - name: Print results
        run: cat build/mull_report_filtered.log

      - name: ReviewDog check
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat build/mull_report_filtered.log | reviewdog -efm="%f:%l:%c: warning: %m" -diff="git diff" -reporter=github-check -name mull -level warning

  msvc-code-analysis:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    runs-on: windows-latest

    # Default windows to use bash
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Configure
        run: |
          # Create build directory
          mkdir build -p
          cd build

          # Configure
          cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Build
        run: |
          cd build
          cmake --build .

      - name: Initialize MSVC Code Analysis
        uses: microsoft/msvc-code-analysis-action@04825f6d9e00f87422d6bf04e1a38b1f3ed60d99
        # Provide a unique ID to access the sarif output path
        id: run-analysis
        with:
          cmakeBuildDirectory: build
          # Ruleset file that will determine what checks will be run
          ruleset: NativeRecommendedRules.ruleset

      # Upload SARIF file to GitHub Code Scanning Alerts
      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.run-analysis.outputs.sarif }}

      # Upload SARIF file as an Artifact to download and view
      - name: Upload SARIF as an Artifact
        uses: actions/upload-artifact@v3
        with:
          name: sarif-file
          path: ${{ steps.run-analysis.outputs.sarif }}

  dev-skim:
    name: DevSkim
    runs-on: ubuntu-20.04

    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run DevSkim scanner
        uses: microsoft/DevSkim-Action@v1

      - name: Upload DevSkim scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: devskim-results.sarif

  codacy-security-scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results

    name: Codacy Security Scan
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v3

      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif
