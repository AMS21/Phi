project("PhiCoreTestUnittests" CXX)

file(GLOB TEST_HEADERS "include/constexpr_helper.hpp" "include/Noexcept.hpp" "include/SameType.hpp"
     "include/test_types.hpp")

file(
  GLOB
  TEST_SOURCES
  # algorithm
  "src/algorithm/at.test.cpp"
  "src/algorithm/clamp.test.cpp"
  "src/algorithm/compare.test.cpp"
  "src/algorithm/exchange.test.cpp"
  "src/algorithm/max.test.cpp"
  "src/algorithm/min.test.cpp"
  "src/algorithm/string_length.test.cpp"
  "src/algorithm/swap.test.cpp"
  # compiler_support
  "src/compiler_support/assume.test.cpp"
  "src/compiler_support/char8_t.test.cpp"
  "src/compiler_support/compiler.test.cpp"
  "src/compiler_support/counter.test.cpp"
  "src/compiler_support/cpp_standard.test.cpp"
  "src/compiler_support/current_function.test.cpp"
  "src/compiler_support/inline.test.cpp"
  "src/compiler_support/likely.test.cpp"
  "src/compiler_support/platform.test.cpp"
  "src/compiler_support/unreachable.test.cpp"
  "src/compiler_support/warning.test.cpp"
  # container
  "src/container/array.test.cpp"
  "src/container/singly_linked_list.test.cpp"
  "src/container/string_view.test.cpp"
  # core
  "src/core/address_of.test.cpp"
  "src/core/as_const.test.cpp"
  "src/core/assert.test.cpp"
  "src/core/boolean.test.cpp"
  "src/core/conversion.test.cpp"
  "src/core/declval.test.cpp"
  "src/core/flat_ptr.test.cpp"
  "src/core/floating_point.test.cpp"
  "src/core/forward.test.cpp"
  "src/core/integer.test.cpp"
  "src/core/invoke.test.cpp"
  "src/core/max_align_t.test.cpp"
  "src/core/monitor.test.cpp"
  "src/core/move_if_noexcept.test.cpp"
  "src/core/move.test.cpp"
  "src/core/named_type.test.cpp"
  "src/core/non_copyable.test.cpp"
  "src/core/not_null.test.cpp"
  "src/core/observer_ptr.test.cpp"
  "src/core/optional.test.cpp"
  "src/core/ptrdiff_t.test.cpp"
  "src/core/scope_guard.test.cpp"
  "src/core/scope_ptr.test.cpp"
  "src/core/scoped_value_guard.test.cpp"
  "src/core/size_t.test.cpp"
  "src/core/sized_types.test.cpp"
  "src/core/source_location.test.cpp"
  "src/core/stop_watch.test.cpp"
  "src/core/types.test.cpp"
  "src/core/voidify.test.cpp"
  # math
  "src/math/abs.test.cpp"
  "src/math/constants.test.cpp"
  "src/math/is_nan.test.cpp"
  "src/math/signum.test.cpp"
  "src/math/vector2.test.cpp"
  # preprocessor
  "src/preprocessor/bool.test.cpp"
  "src/preprocessor/function_like_macro.test.cpp"
  "src/preprocessor/glue.test.cpp"
  "src/preprocessor/if_else.test.cpp"
  "src/preprocessor/if.test.cpp"
  "src/preprocessor/source_line.test.cpp"
  "src/preprocessor/stringify.test.cpp"
  "src/preprocessor/versioning.test.cpp"
  # selftest
  "src/selftest/constexpr_helper.test.cpp"
  # text
  "src/text/is_alpha_numeric.test.cpp"
  "src/text/is_alpha.test.cpp"
  "src/text/is_ascii.test.cpp"
  "src/text/is_binary_digit.test.cpp"
  "src/text/is_blank.test.cpp"
  "src/text/is_control.test.cpp"
  "src/text/is_digit.test.cpp"
  "src/text/is_graphical_character.test.cpp"
  "src/text/is_hex_digit.test.cpp"
  "src/text/is_lower_case.test.cpp"
  "src/text/is_octal_digit.test.cpp"
  "src/text/is_printable.test.cpp"
  "src/text/is_punctuation.test.cpp"
  "src/text/is_space.test.cpp"
  "src/text/is_upper_case.test.cpp"
  # type_traits
  "src/type_traits/detail/nat.test.cpp"
  "src/type_traits/detail/yes_no_type.test.cpp"
  "src/type_traits/add_const.test.cpp"
  "src/type_traits/add_cv.test.cpp"
  "src/type_traits/add_lvalue_reference.test.cpp"
  "src/type_traits/add_pointer.test.cpp"
  "src/type_traits/add_rvalue_reference.test.cpp"
  "src/type_traits/add_volatile.test.cpp"
  "src/type_traits/aligned_storage.test.cpp"
  "src/type_traits/aligned_union.test.cpp"
  "src/type_traits/alignment_of.test.cpp"
  "src/type_traits/array_size.test.cpp"
  "src/type_traits/bool_constant.test.cpp"
  "src/type_traits/common_type.test.cpp"
  "src/type_traits/conditional.test.cpp"
  "src/type_traits/conjunction.test.cpp"
  "src/type_traits/copy_const.test.cpp"
  "src/type_traits/copy_cv.test.cpp"
  "src/type_traits/copy_volatile.test.cpp"
  "src/type_traits/decay.test.cpp"
  "src/type_traits/disable_if.test.cpp"
  "src/type_traits/disjunction.test.cpp"
  "src/type_traits/enable_if.test.cpp"
  "src/type_traits/extent.test.cpp"
  "src/type_traits/extent.nointrinsic.test.cpp"
  "src/type_traits/false_t.test.cpp"
  "src/type_traits/has_unique_object_representations.nointrinsic.test.cpp"
  "src/type_traits/has_unique_object_representations.test.cpp"
  "src/type_traits/has_virtual_destructor.nointrinsic.test.cpp"
  "src/type_traits/has_virtual_destructor.test.cpp"
  "src/type_traits/integral_constant.test.cpp"
  "src/type_traits/invoke_result.no_is_base_of.test.cpp"
  "src/type_traits/invoke_result.nointrinsic.test.cpp"
  "src/type_traits/invoke_result.test.cpp"
  "src/type_traits/is_abstract.nointrinsic.test.cpp"
  "src/type_traits/is_abstract.test.cpp"
  "src/type_traits/is_aggregate.nointrinsic.test.cpp"
  "src/type_traits/is_aggregate.test.cpp"
  "src/type_traits/is_arithmetic.test.cpp"
  "src/type_traits/is_array.nointrinsic.test.cpp"
  "src/type_traits/is_array.test.cpp"
  "src/type_traits/is_assignable.nointrinsic.test.cpp"
  "src/type_traits/is_assignable.test.cpp"
  "src/type_traits/is_base_of.nointrinsic.test.cpp"
  "src/type_traits/is_base_of.nointrinsic2.test.cpp"
  "src/type_traits/is_base_of.nointrinsic3.test.cpp"
  "src/type_traits/is_base_of.test.cpp"
  "src/type_traits/is_bool.test.cpp"
  "src/type_traits/is_bounded_array.test.cpp"
  "src/type_traits/is_class.test.cpp"
  "src/type_traits/is_complete_or_unbounded_void.test.cpp"
  "src/type_traits/is_complete_or_unbounded.test.cpp"
  "src/type_traits/is_complete_or_void.test.cpp"
  "src/type_traits/is_complete.test.cpp"
  "src/type_traits/is_compound.test.cpp"
  "src/type_traits/is_const.test.cpp"
  "src/type_traits/is_constant_evaluated.test.cpp"
  "src/type_traits/is_constructible.test.cpp"
  "src/type_traits/is_convertible.test.cpp"
  "src/type_traits/is_copy_assignable.test.cpp"
  "src/type_traits/is_copy_constructible.test.cpp"
  "src/type_traits/is_corresponding_member.test.cpp"
  "src/type_traits/is_default_constructible.test.cpp"
  "src/type_traits/is_derived_from.test.cpp"
  "src/type_traits/is_destructible.test.cpp"
  "src/type_traits/is_empty.test.cpp"
  "src/type_traits/is_enum.test.cpp"
  "src/type_traits/is_final.test.cpp"
  "src/type_traits/is_floating_point.test.cpp"
  "src/type_traits/is_function_pointer.test.cpp"
  "src/type_traits/is_function.test.cpp"
  "src/type_traits/is_fundamental.test.cpp"
  "src/type_traits/is_integer.test.cpp"
  "src/type_traits/is_integral.test.cpp"
  "src/type_traits/is_invocable_r.test.cpp"
  "src/type_traits/is_invocable.test.cpp"
  "src/type_traits/is_layout_compatible.test.cpp"
  "src/type_traits/is_literal_type.test.cpp"
  "src/type_traits/is_lvalue_reference.test.cpp"
  "src/type_traits/is_member_function_pointer.test.cpp"
  "src/type_traits/is_member_object_pointer.test.cpp"
  "src/type_traits/is_member_pointer.test.cpp"
  "src/type_traits/is_move_assignable.test.cpp"
  "src/type_traits/is_move_constructible.test.cpp"
  "src/type_traits/is_nothrow_assignable.test.cpp"
  "src/type_traits/is_nothrow_constructible.test.cpp"
  "src/type_traits/is_nothrow_convertible.test.cpp"
  "src/type_traits/is_nothrow_copy_assignable.test.cpp"
  "src/type_traits/is_nothrow_copy_constructible.test.cpp"
  "src/type_traits/is_nothrow_default_constructible.test.cpp"
  "src/type_traits/is_nothrow_destructible.test.cpp"
  "src/type_traits/is_nothrow_invocable_r.test.cpp"
  "src/type_traits/is_nothrow_invocable.test.cpp"
  "src/type_traits/is_nothrow_move_assignable.test.cpp"
  "src/type_traits/is_nothrow_move_constructible.test.cpp"
  "src/type_traits/is_nothrow_swappable_with.test.cpp"
  "src/type_traits/is_nothrow_swappable.test.cpp"
  "src/type_traits/is_null_pointer_or_pointer.test.cpp"
  "src/type_traits/is_null_pointer.test.cpp"
  "src/type_traits/is_object.test.cpp"
  "src/type_traits/is_pod.test.cpp"
  "src/type_traits/is_pointer_interconvertible_base_of.test.cpp"
  "src/type_traits/is_pointer_interconvertible_with_class.test.cpp"
  "src/type_traits/is_pointer.test.cpp"
  "src/type_traits/is_polymorphic.test.cpp"
  "src/type_traits/is_reference_wrapper.test.cpp"
  "src/type_traits/is_reference.test.cpp"
  "src/type_traits/is_referenceable.test.cpp"
  "src/type_traits/is_rvalue_reference.test.cpp"
  "src/type_traits/is_safe_arithmetic.test.cpp"
  "src/type_traits/is_safe_bool.test.cpp"
  "src/type_traits/is_safe_floating_point.test.cpp"
  "src/type_traits/is_safe_fundamental.test.cpp"
  "src/type_traits/is_safe_integer.test.cpp"
  "src/type_traits/is_safe_integral.test.cpp"
  "src/type_traits/is_safe_scalar.test.cpp"
  "src/type_traits/is_safe_signed_integer.test.cpp"
  "src/type_traits/is_safe_signed.test.cpp"
  "src/type_traits/is_safe_type.test.cpp"
  "src/type_traits/is_safe_unsigned_integer.test.cpp"
  "src/type_traits/is_safe_unsigned.test.cpp"
  "src/type_traits/is_same_rc.test.cpp"
  "src/type_traits/is_same_rcv.test.cpp"
  "src/type_traits/is_same_rcvref.test.cpp"
  "src/type_traits/is_same_rv.test.cpp"
  "src/type_traits/is_same.test.cpp"
  "src/type_traits/is_scalar.test.cpp"
  "src/type_traits/is_scoped_enum.test.cpp"
  "src/type_traits/is_signed_integer.test.cpp"
  "src/type_traits/is_signed.test.cpp"
  "src/type_traits/is_standard_layout.test.cpp"
  "src/type_traits/is_swappable_with.test.cpp"
  "src/type_traits/is_swappable.test.cpp"
  "src/type_traits/is_trivial.test.cpp"
  "src/type_traits/is_trivially_assignable.test.cpp"
  "src/type_traits/is_trivially_constructible.test.cpp"
  "src/type_traits/is_trivially_copy_assignable.test.cpp"
  "src/type_traits/is_trivially_copy_constructible.test.cpp"
  "src/type_traits/is_trivially_copyable.test.cpp"
  "src/type_traits/is_trivially_default_constructible.test.cpp"
  "src/type_traits/is_trivially_destructible.test.cpp"
  "src/type_traits/is_trivially_move_assignable.test.cpp"
  "src/type_traits/is_trivially_move_constructible.test.cpp"
  "src/type_traits/is_unbounded_array.test.cpp"
  "src/type_traits/is_union.test.cpp"
  "src/type_traits/is_unsafe_arithmetic.test.cpp"
  "src/type_traits/is_unsafe_bool.test.cpp"
  "src/type_traits/is_unsafe_floating_point.test.cpp"
  "src/type_traits/is_unsafe_fundamental.test.cpp"
  "src/type_traits/is_unsafe_integer.test.cpp"
  "src/type_traits/is_unsafe_integral.test.cpp"
  "src/type_traits/is_unsafe_scalar.test.cpp"
  "src/type_traits/is_unsafe_signed_integer.test.cpp"
  "src/type_traits/is_unsafe_signed.test.cpp"
  "src/type_traits/is_unsafe_type.test.cpp"
  "src/type_traits/is_unsafe_unsigned_integer.test.cpp"
  "src/type_traits/is_unsafe_unsigned.test.cpp"
  "src/type_traits/is_unscoped_enum.test.cpp"
  "src/type_traits/is_unsigned_integer.test.cpp"
  "src/type_traits/is_unsigned.test.cpp"
  "src/type_traits/is_void.test.cpp"
  "src/type_traits/is_volatile.test.cpp"
  "src/type_traits/make_safe.test.cpp"
  "src/type_traits/make_signed.test.cpp"
  "src/type_traits/make_unsafe.test.cpp"
  "src/type_traits/make_unsigned.test.cpp"
  "src/type_traits/negation.test.cpp"
  "src/type_traits/rank.test.cpp"
  "src/type_traits/remove_all_extents.test.cpp"
  "src/type_traits/remove_const.test.cpp"
  "src/type_traits/remove_cv.test.cpp"
  "src/type_traits/remove_cvref.test.cpp"
  "src/type_traits/remove_extent.test.cpp"
  "src/type_traits/remove_pointer.test.cpp"
  "src/type_traits/remove_reference.test.cpp"
  "src/type_traits/remove_volatile.test.cpp"
  "src/type_traits/signed_int_of_size.test.cpp"
  "src/type_traits/size_constant.test.cpp"
  "src/type_traits/static_max.test.cpp"
  "src/type_traits/static_min.test.cpp"
  "src/type_traits/to_safe.test.cpp"
  "src/type_traits/to_unsafe.test.cpp"
  "src/type_traits/true_t.test.cpp"
  "src/type_traits/type_identity.test.cpp"
  "src/type_traits/underlying_type.test.cpp"
  "src/type_traits/unsigned_int_of_size.test.cpp"
  "src/type_traits/void_t.test.cpp"
  # Base
  "src/phi_config.test.cpp"
  "src/type_traits.test.cpp")

if(${CMAKE_VERSION} VERSION_GREATER "3.7")
  source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${TEST_HEADERS} ${TEST_SOURCES})
endif()

# Add test files
if(${PHI_TEST_WITH_ALL_STANDARDS})
  # Test with all supported standard version
  foreach(std IN ITEMS ${phi_supported_standards})
    if(DEFINED CMAKE_CXX${std}_STANDARD_COMPILE_OPTION)
      phi_add_executable(
        NAME
        "PhiCoreUnittests${std}"
        SOURCES
        ${TEST_SOURCES}
        FOLDER
        "Tests/PhiCore"
        PRIVATE_LINK_LIBRARIES
        Phi::InternalProjectOptions
        Phi::Core
        Phi::Test
        PRIVATE_INCLUDE_DIRS
        "include")
      phi_add_test(TARGET "PhiCoreUnittests${std}")
      target_compile_options("PhiCoreUnittests${std}"
                             PRIVATE "${CMAKE_CXX${std}_STANDARD_COMPILE_OPTION}")

      phi_add_executable(
        NAME
        "PhiCoreUnittestsNoIntrinsics${std}"
        SOURCES
        ${TEST_SOURCES}
        FOLDER
        "Tests/PhiCore"
        PRIVATE_LINK_LIBRARIES
        Phi::InternalProjectOptions
        Phi::Core
        Phi::Test
        PRIVATE_INCLUDE_DIRS
        "include")
      target_compile_definitions("PhiCoreUnittestsNoIntrinsics${std}"
                                 PRIVATE "PHI_CONFIG_NO_INTRINSICS")
      phi_add_test(TARGET "PhiCoreUnittestsNoIntrinsics${std}")
      target_compile_options("PhiCoreUnittestsNoIntrinsics${std}"
                             PRIVATE "${CMAKE_CXX${std}_STANDARD_COMPILE_OPTION}")
    endif()

  endforeach()

else()
  phi_add_executable(
    NAME
    "PhiCoreUnittests"
    SOURCES
    ${TEST_SOURCES}
    FOLDER
    "Tests/PhiCore"
    PRIVATE_LINK_LIBRARIES
    Phi::InternalProjectOptions
    Phi::Core
    Phi::Test
    PRIVATE_INCLUDE_DIRS
    "include")
  phi_enable_static_analyzers("PhiCoreUnittests")
  phi_add_test(TARGET "PhiCoreUnittests")

  phi_add_executable(
    NAME
    "PhiCoreUnittestsNoIntrinsics"
    SOURCES
    ${TEST_SOURCES}
    FOLDER
    "Tests/PhiCore"
    PRIVATE_LINK_LIBRARIES
    Phi::InternalProjectOptions
    Phi::Core
    Phi::Test
    PRIVATE_INCLUDE_DIRS
    "include")
  phi_enable_static_analyzers("PhiCoreUnittestsNoIntrinsics")
  target_compile_definitions("PhiCoreUnittestsNoIntrinsics" PRIVATE "PHI_CONFIG_NO_INTRINSICS")
  phi_add_test(TARGET "PhiCoreUnittestsNoIntrinsics")

endif()
