#include <phi/test/test_macros.hpp>

#include <phi/algorithm/string_equals.hpp>
#include <phi/compiler_support/compiler.hpp>

TEST_CASE("Config Compiler", "[Config][Compiler]")
{
#if PHI_COMPILER_IS(CLANG)
    STATIC_REQUIRE(PHI_COMPILER_CLANG());
#endif
#if PHI_COMPILER_IS(GCC)
    STATIC_REQUIRE(PHI_COMPILER_GCC());
#endif
#if PHI_COMPILER_IS(MSVC)
    STATIC_REQUIRE(PHI_COMPILER_MSVC());
#endif
#if PHI_COMPILER_IS(MINGW)
    STATIC_REQUIRE(PHI_COMPILER_MINGW());
#endif
#if PHI_COMPILER_IS(EMCC)
    STATIC_REQUIRE(PHI_COMPILER_EMCC());
#endif
#if PHI_COMPILER_IS(ICC)
    STATIC_REQUIRE(PHI_COMPILER_ICC());
#endif
#if PHI_COMPILER_IS(APPLECLANG)
    STATIC_REQUIRE(PHI_COMPILER_APPLECLANG());
#endif
#if PHI_COMPILER_IS(WINCLANG)
    STATIC_REQUIRE(PHI_COMPILER_WINCLANG());
#endif

// Compiler compatibility
#if PHI_COMPILER_IS(GCC_COMPAT)
    STATIC_REQUIRE(PHI_COMPILER_GCC_COMPAT());
#endif
#if PHI_COMPILER_IS(CLANG_COMPAT)
    STATIC_REQUIRE(PHI_COMPILER_CLANG_COMPAT());
#endif
}

TEST_CASE("Specific flags")
{
#if PHI_COMPILER_IS(EMCC)
    STATIC_REQUIRE(PHI_COMPILER_EMCC());
    STATIC_REQUIRE(PHI_COMPILER_GCC_COMPAT());
    STATIC_REQUIRE(PHI_COMPILER_CLANG_COMPAT());

    STATIC_REQUIRE_FALSE(PHI_COMPILER_CLANG());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_APPLECLANG());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_WINCLANG());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_GCC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_ICC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_MSVC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_MINGW());

    STATIC_REQUIRE(phi::string_equals(PHI_COMPILER_NAME(), "Emscripten"));

    STATIC_REQUIRE(PHI_EMCC_VERSION_MAJOR() == PHI_CURRENT_COMPILER_VERSION_MAJOR());
    STATIC_REQUIRE(PHI_EMCC_VERSION_MINOR() == PHI_CURRENT_COMPILER_VERSION_MINOR());
    STATIC_REQUIRE(PHI_EMCC_VERSION_PATCH() == PHI_CURRENT_COMPILER_VERSION_PATCH());

    STATIC_REQUIRE(PHI_COMPILER_VERSION_MAJOR(EMCC) == PHI_CURRENT_COMPILER_VERSION_MAJOR());
    STATIC_REQUIRE(PHI_COMPILER_VERSION_MINOR(EMCC) == PHI_CURRENT_COMPILER_VERSION_MINOR());
    STATIC_REQUIRE(PHI_COMPILER_VERSION_PATCH(EMCC) == PHI_CURRENT_COMPILER_VERSION_PATCH());
    STATIC_REQUIRE(PHI_COMPILER_VERSION(EMCC) == PHI_CURRENT_COMPILER_VERSION());
#elif PHI_COMPILER_IS(CLANG)
    STATIC_REQUIRE(PHI_COMPILER_CLANG());
    STATIC_REQUIRE(PHI_COMPILER_CLANG_COMPAT());

#    if PHI_PLATFORM_IS(WINDOWS)
    STATIC_REQUIRE(PHI_COMPILER_WINCLANG());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_GCC_COMPAT());
#    else
    STATIC_REQUIRE_FALSE(PHI_COMPILER_WINCLANG());
    STATIC_REQUIRE(PHI_COMPILER_GCC_COMPAT());
#    endif
    STATIC_REQUIRE_FALSE(PHI_COMPILER_APPLECLANG());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_EMCC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_GCC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_ICC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_MSVC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_MINGW());

#    if PHI_COMPILER_IS(WINCLANG)
    STATIC_REQUIRE(phi::string_equals(PHI_COMPILER_NAME(), "WinClang"));
#    else
    STATIC_REQUIRE(phi::string_equals(PHI_COMPILER_NAME(), "Clang"));
#    endif

    STATIC_REQUIRE(PHI_CLANG_VERSION_MAJOR() == PHI_CURRENT_COMPILER_VERSION_MAJOR());
    STATIC_REQUIRE(PHI_CLANG_VERSION_MINOR() == PHI_CURRENT_COMPILER_VERSION_MINOR());
    STATIC_REQUIRE(PHI_CLANG_VERSION_PATCH() == PHI_CURRENT_COMPILER_VERSION_PATCH());

    STATIC_REQUIRE(PHI_COMPILER_VERSION_MAJOR(CLANG) == PHI_CURRENT_COMPILER_VERSION_MAJOR());
    STATIC_REQUIRE(PHI_COMPILER_VERSION_MINOR(CLANG) == PHI_CURRENT_COMPILER_VERSION_MINOR());
    STATIC_REQUIRE(PHI_COMPILER_VERSION_PATCH(CLANG) == PHI_CURRENT_COMPILER_VERSION_PATCH());
    STATIC_REQUIRE(PHI_COMPILER_VERSION(CLANG) == PHI_CURRENT_COMPILER_VERSION());
#elif PHI_COMPILER_IS(APPLECLANG)
    STATIC_REQUIRE(PHI_COMPILER_APPLECLANG());
    STATIC_REQUIRE(PHI_COMPILER_GCC_COMPAT());
    STATIC_REQUIRE(PHI_COMPILER_CLANG_COMPAT());

    STATIC_REQUIRE_FALSE(PHI_COMPILER_CLANG());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_WINCLANG());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_EMCC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_GCC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_ICC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_MSVC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_MINGW());

    STATIC_REQUIRE(phi::string_equals(PHI_COMPILER_NAME(), "AppleClang"));

    STATIC_REQUIRE(PHI_APPLECLANG_VERSION_MAJOR() == PHI_CURRENT_COMPILER_VERSION_MAJOR());
    STATIC_REQUIRE(PHI_APPLECLANG_VERSION_MINOR() == PHI_CURRENT_COMPILER_VERSION_MINOR());
    STATIC_REQUIRE(PHI_APPLECLANG_VERSION_PATCH() == PHI_CURRENT_COMPILER_VERSION_PATCH());

    STATIC_REQUIRE(PHI_COMPILER_VERSION_MAJOR(APPLECLANG) == PHI_CURRENT_COMPILER_VERSION_MAJOR());
    STATIC_REQUIRE(PHI_COMPILER_VERSION_MINOR(APPLECLANG) == PHI_CURRENT_COMPILER_VERSION_MINOR());
    STATIC_REQUIRE(PHI_COMPILER_VERSION_PATCH(APPLECLANG) == PHI_CURRENT_COMPILER_VERSION_PATCH());
    STATIC_REQUIRE(PHI_COMPILER_VERSION(APPLECLANG) == PHI_CURRENT_COMPILER_VERSION());
#elif PHI_COMPILER_IS(GCC)
    STATIC_REQUIRE(PHI_COMPILER_GCC());
    STATIC_REQUIRE(PHI_COMPILER_GCC_COMPAT());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_CLANG_COMPAT());

    STATIC_REQUIRE_FALSE(PHI_COMPILER_APPLECLANG());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_WINCLANG());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_EMCC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_CLANG());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_ICC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_MSVC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_MINGW());

    STATIC_REQUIRE(phi::string_equals(PHI_COMPILER_NAME(), "GCC"));

    STATIC_REQUIRE(PHI_GCC_VERSION_MAJOR() == PHI_CURRENT_COMPILER_VERSION_MAJOR());
    STATIC_REQUIRE(PHI_GCC_VERSION_MINOR() == PHI_CURRENT_COMPILER_VERSION_MINOR());
    STATIC_REQUIRE(PHI_GCC_VERSION_PATCH() == PHI_CURRENT_COMPILER_VERSION_PATCH());

    STATIC_REQUIRE(PHI_COMPILER_VERSION_MAJOR(GCC) == PHI_CURRENT_COMPILER_VERSION_MAJOR());
    STATIC_REQUIRE(PHI_COMPILER_VERSION_MINOR(GCC) == PHI_CURRENT_COMPILER_VERSION_MINOR());
    STATIC_REQUIRE(PHI_COMPILER_VERSION_PATCH(GCC) == PHI_CURRENT_COMPILER_VERSION_PATCH());
    STATIC_REQUIRE(PHI_COMPILER_VERSION(GCC) == PHI_CURRENT_COMPILER_VERSION());
#elif PHI_COMPILER_IS(MINGW)
    STATIC_REQUIRE(PHI_COMPILER_MINGW());
    STATIC_REQUIRE(PHI_COMPILER_GCC_COMPAT());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_CLANG_COMPAT());

    STATIC_REQUIRE_FALSE(PHI_COMPILER_APPLECLANG());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_WINCLANG());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_EMCC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_CLANG());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_ICC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_MSVC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_GCC());

    STATIC_REQUIRE(phi::string_equals(PHI_COMPILER_NAME(), "MinGW32") ||
                   phi::string_equals(PHI_COMPILER_NAME(), "MinGW64"));

    STATIC_REQUIRE(PHI_MINGW_VERSION_MAJOR() == PHI_CURRENT_COMPILER_VERSION_MAJOR());
    STATIC_REQUIRE(PHI_MINGW_VERSION_MINOR() == PHI_CURRENT_COMPILER_VERSION_MINOR());
    STATIC_REQUIRE(PHI_MINGW_VERSION_PATCH() == PHI_CURRENT_COMPILER_VERSION_PATCH());

    STATIC_REQUIRE(PHI_COMPILER_VERSION_MAJOR(MINGW) == PHI_CURRENT_COMPILER_VERSION_MAJOR());
    STATIC_REQUIRE(PHI_COMPILER_VERSION_MINOR(MINGW) == PHI_CURRENT_COMPILER_VERSION_MINOR());
    STATIC_REQUIRE(PHI_COMPILER_VERSION_PATCH(MINGW) == PHI_CURRENT_COMPILER_VERSION_PATCH());
    STATIC_REQUIRE(PHI_COMPILER_VERSION(MINGW) == PHI_CURRENT_COMPILER_VERSION());
#elif PHI_COMPILER_IS(MSVC)
    STATIC_REQUIRE(PHI_COMPILER_MSVC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_GCC_COMPAT());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_CLANG_COMPAT());

    STATIC_REQUIRE_FALSE(PHI_COMPILER_APPLECLANG());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_WINCLANG());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_EMCC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_GCC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_ICC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_CLANG());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_MINGW());

    STATIC_REQUIRE(phi::string_equals(PHI_COMPILER_NAME(), "MSVC"));

    STATIC_REQUIRE(PHI_MSVC_VERSION_MAJOR() == PHI_CURRENT_COMPILER_VERSION_MAJOR());
    STATIC_REQUIRE(PHI_MSVC_VERSION_MINOR() == PHI_CURRENT_COMPILER_VERSION_MINOR());
    STATIC_REQUIRE(PHI_MSVC_VERSION_PATCH() == PHI_CURRENT_COMPILER_VERSION_PATCH());

    STATIC_REQUIRE(PHI_COMPILER_VERSION_MAJOR(MSVC) == PHI_CURRENT_COMPILER_VERSION_MAJOR());
    STATIC_REQUIRE(PHI_COMPILER_VERSION_MINOR(MSVC) == PHI_CURRENT_COMPILER_VERSION_MINOR());
    STATIC_REQUIRE(PHI_COMPILER_VERSION_PATCH(MSVC) == PHI_CURRENT_COMPILER_VERSION_PATCH());
    STATIC_REQUIRE(PHI_COMPILER_VERSION(MSVC) == PHI_CURRENT_COMPILER_VERSION());
#elif PHI_COMPILER_IS(ICC)
    STATIC_REQUIRE(PHI_COMPILER_ICC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_GCC_COMPAT());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_CLANG_COMPAT());

    STATIC_REQUIRE_FALSE(PHI_COMPILER_APPLECLANG());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_WINCLANG());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_EMCC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_GCC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_MSVC());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_CLANG());
    STATIC_REQUIRE_FALSE(PHI_COMPILER_MINGW());

    STATIC_REQUIRE(phi::string_equals(PHI_COMPILER_NAME(), "ICC"));

    STATIC_REQUIRE(PHI_ICC_VERSION_MAJOR() == PHI_CURRENT_COMPILER_VERSION_MAJOR());
    STATIC_REQUIRE(PHI_ICC_VERSION_MINOR() == PHI_CURRENT_COMPILER_VERSION_MINOR());
    STATIC_REQUIRE(PHI_ICC_VERSION_PATCH() == PHI_CURRENT_COMPILER_VERSION_PATCH());

    STATIC_REQUIRE(PHI_COMPILER_VERSION_MAJOR(ICC) == PHI_CURRENT_COMPILER_VERSION_MAJOR());
    STATIC_REQUIRE(PHI_COMPILER_VERSION_MINOR(ICC) == PHI_CURRENT_COMPILER_VERSION_MINOR());
    STATIC_REQUIRE(PHI_COMPILER_VERSION_PATCH(ICC) == PHI_CURRENT_COMPILER_VERSION_PATCH());
    STATIC_REQUIRE(PHI_COMPILER_VERSION(ICC) == PHI_CURRENT_COMPILER_VERSION());
#endif
}

TEST_CASE("PHI_COMPILER_WORKAROUND")
{
#if PHI_COMPILER_WORKAROUND(GCC, 11, 0, 0)
    STATIC_REQUIRE(PHI_COMPILER_WORKAROUND(GCC, 11, 0, 0));
#endif

#if PHI_COMPILER_WORKAROUND(CLANG, 13, 0, 0)
    STATIC_REQUIRE(PHI_COMPILER_WORKAROUND(CLANG, 13, 0, 0));
#endif

#if PHI_COMPILER_WORKAROUND(MSVC, 19, 24, 0)
    STATIC_REQUIRE(PHI_COMPILER_WORKAROUND(MSVC, 19, 24, 0));
#endif
}
