project("Phi_AllIncludes" CXX)

# Include all headers
file(GLOB PHI_LIBRARIES ${PHI_BASE_DIR}/libs/*)

# Build file content
set(ALL_INCLUDE_MAIN "IncludeAllFiles.cpp")
set(ALL_INCLUDE_SECOND "IncludeAllFilesSecond.cpp")
set(FILE_CONTENT
    "// DO NOT MODIFY THIS FILES CONTENTS IT'S AUTOMATICALLY GENERATED BY CMAKE DURING BUILDS\n\n")

# Loop through every library
foreach(lib ${PHI_LIBRARIES})
  if(IS_DIRECTORY ${lib})

    # Get all header files from the lib
    file(GLOB_RECURSE headers ${lib}/include/*.hpp)

    file(RELATIVE_PATH lib_name ${PHI_BASE_DIR}/libs ${lib})
    string(APPEND FILE_CONTENT "// ${lib_name}\n")

    foreach(file ${headers})
      # Include each header file relative from its include directory
      file(RELATIVE_PATH include_path ${lib}/include ${file})
      string(APPEND FILE_CONTENT "#include <" ${include_path} ">\n")
    endforeach()
  endif()
endforeach()

# Generate second file
file(
  GENERATE
  OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/${ALL_INCLUDE_SECOND}"
  CONTENT "${FILE_CONTENT}")

# Add the main function
string(APPEND FILE_CONTENT "\nPHI_ATTRIBUTE_CONST int main() { return 0; }\n")

# Generate main file
file(
  GENERATE
  OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/${ALL_INCLUDE_MAIN}"
  CONTENT "${FILE_CONTENT}")

# Add test
if(${PHI_TEST_WITH_ALL_STANDARDS})
  foreach(std IN ITEMS ${phi_supported_standards})
    if(DEFINED CMAKE_CXX${std}_STANDARD_COMPILE_OPTION)
      phi_add_executable(
        NAME
        "Phi_AllIncludes${std}"
        SOURCES
        "${CMAKE_CURRENT_BINARY_DIR}/${ALL_INCLUDE_MAIN}"
        "${CMAKE_CURRENT_BINARY_DIR}/${ALL_INCLUDE_SECOND}"
        FOLDER
        "Tests/Integration"
        PRIVATE_LINK_LIBRARIES
        Phi::Core
        Phi::Test
        NO_GROUP)

      # No rtti
      phi_add_executable(
        NAME
        "Phi_AllIncludes${std}_no_rtti"
        SOURCES
        "${CMAKE_CURRENT_BINARY_DIR}/${ALL_INCLUDE_MAIN}"
        "${CMAKE_CURRENT_BINARY_DIR}/${ALL_INCLUDE_SECOND}"
        FOLDER
        "Tests/Integration"
        PRIVATE_LINK_LIBRARIES
        Phi::Core
        Phi::Test
        NO_GROUP)
      phi_target_set_rtti(TARGET "Phi_AllIncludes${std}_no_rtti" DISABLE)

      # No exceptions
      phi_add_executable(
        NAME
        "Phi_AllIncludes${std}_no_exception"
        SOURCES
        "${CMAKE_CURRENT_BINARY_DIR}/${ALL_INCLUDE_MAIN}"
        "${CMAKE_CURRENT_BINARY_DIR}/${ALL_INCLUDE_SECOND}"
        FOLDER
        "Tests/Integration"
        PRIVATE_LINK_LIBRARIES
        Phi::Core
        Phi::Test
        NO_GROUP)
      phi_target_disable_exceptions(TARGET "Phi_AllIncludes${std}_no_exception")
    endif()
  endforeach()
else()
  phi_add_executable(
    NAME
    "Phi_AllIncludes"
    SOURCES
    "${CMAKE_CURRENT_BINARY_DIR}/${ALL_INCLUDE_MAIN}"
    "${CMAKE_CURRENT_BINARY_DIR}/${ALL_INCLUDE_SECOND}"
    FOLDER
    "Tests/Integration"
    PRIVATE_LINK_LIBRARIES
    Phi::Core
    Phi::Test
    NO_GROUP)

  # No rtti
  phi_add_executable(
    NAME
    "Phi_AllIncludes_no_rtti"
    SOURCES
    "${CMAKE_CURRENT_BINARY_DIR}/${ALL_INCLUDE_MAIN}"
    "${CMAKE_CURRENT_BINARY_DIR}/${ALL_INCLUDE_SECOND}"
    FOLDER
    "Tests/Integration"
    PRIVATE_LINK_LIBRARIES
    Phi::Core
    Phi::Test
    NO_GROUP)
  phi_target_set_rtti(TARGET "Phi_AllIncludes_no_rtti" DISABLE)

  # No exceptions
  phi_add_executable(
    NAME
    "Phi_AllIncludes_no_exception"
    SOURCES
    "${CMAKE_CURRENT_BINARY_DIR}/${ALL_INCLUDE_MAIN}"
    "${CMAKE_CURRENT_BINARY_DIR}/${ALL_INCLUDE_SECOND}"
    FOLDER
    "Tests/Integration"
    PRIVATE_LINK_LIBRARIES
    Phi::Core
    Phi::Test
    NO_GROUP)
  phi_target_disable_exceptions(TARGET "Phi_AllIncludes_no_exception")
endif()
